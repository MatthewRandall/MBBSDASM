{
  "Name": "MAJORBBS",
  "Exports": [
    {
      "name": "__READ",
      "ord": 1,
      "Signature" : "int _CType _FARFUNC __read (int fd, void *buf, unsigned int len);",
      "Comments": [
        "read - reads from file"
      ]
    },
    {
      "name": "__SIGNALPTR",
      "ord": 2,
      "Signature" : "extern _CatcherPTR (*__SignalPtr)();",
      "Comments": []
    },
    {
      "name": "__WRITE",
      "ord": 3,
      "Signature" : "int _CType _FARFUNC __write(int fd, const void *buf, unsigned int len);",
      "Comments": [
        "write - writes to a file"
      ]
    },
    {
      "name": "_C_EXIT",
      "ord": 4,
      "Signature": "void _c_exit(void);",
      "Comments": [
        "Perform quick exit cleanup without termination."
      ]
    },
    {
      "name": "_CEXIT",
      "ord": 5,
      "Signature" : "void _cexit(void);",
      "Comments": [
        "_cexit  - perform exit cleanup without termination"
      ]
    },
    {
      "name": "_CHECKNULL",
      "ord": 6,
      "Signature" : "void _checknull( void );",
      "Comments": [
        "Check for null pointer usage"
      ]
    },
    {
      "name": "_CHMOD",
      "ord": 7,
      "Signature" : "int _chmod(const char *filename, int func [,int attrib]);",
      "Comments": [
        "chmod - changes access mode of file"
      ]
    },
    {
      "name": "_CLEANUP",
      "ord": 8,
      "Signature" : "void _cleanup( void );",
      "Comments": [
        "Call #pragma exit routines"
      ]
    },
    {
      "name": "_CLOSE",
      "ord": 9,
      "Signature" : "int _RTLENTRYF _EXPFUNC _close (int fd);",
      "Comments": [
        "close - close a file handle (obsolete)"
      ]
    },
    {
      "name": "_CREAT",
      "ord": 10,
      "Signature" : "int _CType _FARFUNC _creat (const char *pathP, int attr);",
      "Comments": [
        "creat - creates a new file or rewrites an existing one (obsolete)"
      ]
    },
    {
      "name": "_CTYPE",
      "ord": 11,
      "Signature" : "unsigned char __cdecl _ctype[257];",
      "Comments": [
        "The old 'C' locale ctype array"
      ]
    },
    {
      "name": "_DOS_GETFILEATTR",
      "ord": 12,
      "Signature" : "unsigned _dos_getfileattr(const char *filename, unsigned *attrib);",
      "Comments": [
        "_dos_getfileattr - get current attributes of file"
      ]
    },
    {
      "name": "_DOS_SETFILEATTR",
      "ord": 13,
      "Signature" : "unsigned _dos_setfileattr(const char *filename, unsigned attrib);",
      "Comments": [
        "_dos_setfileattr - set current attributes of file"
      ]
    },
    {
      "name": "_DOSERROR",
      "ord": 14,
      "Signature" : "int pascal __DOSerror (int dosErr);",
      "Comments": [
        "__DOSerror - set error variables"
      ]
    },
    {
      "name": "_EXIT",
      "ord": 15,
      "Signature" : "void _exit(int status);",
      "Comments": [
        "exit - terminates program"
      ]
    },
    {
      "name": "_EXITBUF",
      "ord": 16,
      "Signature" : "void (*_exitbuf)(void);",
      "Comments": []
    },
    {
      "name": "_EXITFOPEN",
      "ord": 17,
      "Signature" : "void (*_exitfopen)(void)",
      "Comments": []
    },
    {
      "name": "_EXITOPEN",
      "ord": 18,
      "Signature" : "void (*_exitopen)(void)",
      "Comments": []
    },
    {
      "name": "_FGETC",
      "ord": 19,
      "Signature": "int _fgetc(FILE *stream);",
      "Comments": [
        "Gets a character from the stream"
      ]
    },
    {
      "name": "_FPUTC",
      "ord": 20,
      "Signature" : "int _fputc(int ch, FILE *stream);",
      "Comments": [
        "_fputc - puts a character on a stream"
      ]
    },
    {
      "name": "_FPUTN",
      "ord": 21,
      "Signature" : "size_t  pascal __fputn(const void *ptr, register size_t n, FILE *fp);",
      "Comments": [
        "__fputn writes n bytes whose address is referenced by ptr to an open stream fp."
      ]
    },
    {
      "name": "_GETFP",
      "ord": 22,
      "Signature" : "FILE  * pascal near __getfp  (void);",
      "Comments": []
    },
    {
      "name": "_IOERROR",
      "ord": 24,
      "Signature" : "int pascal __IOerror (int dosErr);",
      "Comments": [
        "__IOerror - set error variables"
      ]
    },
    {
      "name": "_ISDST",
      "ord": 25,
      "Signature" : " int  pascal __isDST (unsigned hour,  unsigned yday, unsigned month, unsigned year);",
      "Comments": [
        "__isDST - determines whether daylight savings is in effect"
      ]
    },
    {
      "name": "_LONGTOA",
      "ord": 26,
      "Signature" : "char *pascal __longtoa (long value, char *strP, int radix, char maybeSigned, char hexStyle);",
      "Comments": [
        "__longtoa - converts a long to a character string"
      ]
    },
    {
      "name": "_MKNAME",
      "ord": 27,
      "Signature" : "char * pascal near __mkname(char *__s, char *__pfx, unsigned __num);",
      "Comments": []
    },
    {
      "name": "_MMODEL",
      "ord": 28,
      "Signature" : "__MMODEL dw MMODEL",
      "Comments": [
        "__MMODEL is used to determine the memory model or the default pointer types at run time."
      ]
    },
    {
      "name": "_NFGETC",
      "ord": 29,
      "Signature" : "asm __Nfgetc    label near",
      "Comments": [
        "Near version of fgetc"
      ]
    },
    {
      "name": "_NUNGETC",
      "ord": 30,
      "Signature" : "asm __Nungetch  label near",
      "Comments": [
        "Near version of ungetch"
      ]
    },
    {
      "name": "_OPEN",
      "ord": 31,
      "Signature" : "int _CType _FARFUNC _open(const char *filename, int oflag);",
      "Comments": [
        "open - opens a file for reading or writing (obsolete)"
      ]
    },
    {
      "name": "__OPENFP",
      "ord": 32,
      "Signature" : "FILE  * pascal near __openfp(FILE *__fp, const char *__fname, const char *__type, int __shflag);",
      "Comments": [
        "opens a file"
      ]
    },
    {
      "name": "_READ",
      "ord": 33,
      "Signature" : "int _read(int handle, void *buf, unsigned nbyte);",
      "Comments": [
        "read - reads from file"
      ]
    },
    {
      "name": "_REALCVT",
      "ord": 34,
      "Signature" : " void _realcvt (double *valueP, int ndec, char *strP, char formCh, char altFormat);",
      "Comments": [
        "_realcvt - converts a double value to an ASCIIZ string"
      ]
    },
    {
      "name": "_RESTOREZERO",
      "ord": 35,
      "Signature" : "void _restorezero(void);",
      "Comments": []
    },
    {
      "name": "_SCANNER",
      "ord": 36,
      "Signature" : "int  _scanner ( int   (*Get)(void *srceP), void  (*UnGet) (int ch, void *srceP), void   *srceP, const char   *formP, va_list varPP )",
      "Comments": [
        "_scanner - reads formatted input"
      ]
    },
    {
      "name": "_SCANPOP",
      "ord": 37,
      "Signature" : "void _scanpop(void);",
      "Comments": [
        "scanpop - Clean stack after conversion error"
      ]
    },
    {
      "name": "_SCANRSLT",
      "ord": 38,
      "Signature" : "void _scanrslt(void far *rsltP, int rsltType);",
      "Comments": [
        "scanrslt - Get conversion result"
      ]
    },
    {
      "name": "_SCANTOL",
      "ord": 40,
      "Signature" : "long _scanttol(int (*Get)(void *srceP), void (*UnGet)(int ch, void *srceP), void *srceP, int radix, int width, int *countP, int *statusP )",
      "Comments": [
        "_scantol - scans a source for an ascii character long"
      ]
    },
    {
      "name": "_SETUPIO",
      "ord": 41,
      "Signature" : "void near _setupio(void);",
      "Comments": []
    },
    {
      "name": "_STPCPY",
      "ord": 42,
      "Signature" : "char *stpcpy(char *destin, const char *source)",
      "Comments": [
        "stpcpy - copies one string to another"
      ]
    },
    {
      "name": "_STREAMS",
      "ord": 43,
      "Signature" : "FILE _streams[_NFILE_]",
      "Comments": [
        "_streams is the array of FILE structures used by the stream handling functions."
      ]
    },
    {
      "name": "_TERMINATE",
      "ord": 44,
      "Signature" : "void Terminate (void);",
      "Comments": []
    },
    {
      "name": "_TMPNAM",
      "ord": 45,
      "Signature" : "char  * pascal near __tmpnam (char *__s, unsigned *__numP);",
      "Comments": []
    },
    {
      "name": "_UTOA",
      "ord": 46,
      "Signature" : "char *__utoa(unsigned value, char *buf);",
      "Comments": [
        "__utoa - converts an unsigned int to a decimal string"
      ]
    },
    {
      "name": "_VPRINTER",
      "ord": 47,
      "Signature" : "int __vprinter (putnF  *putter, void   *outP, const _TCHAR *formP, int __use_nsize, size_t __nsize, va_list *argP)",
      "Comments": [
        "Sends formatted output"
      ]
    },
    {
      "name": "_WRITE",
      "ord": 48,
      "Signature" : "int _CType _FARFUNC _write(int fd, const void *buf, unsigned len);",
      "Comments": [
        "write - writes to a file (untranslated) (obsolete)"
      ]
    },
    {
      "name": "_XFCLOSE",
      "ord": 49,
      "Signature" : "void _xfclose(void);",
      "Comments": [
        "Description called at exit to close open streams"
      ]
    },
    {
      "name": "_XFFLUSH",
      "ord": 50,
      "Signature" : "void _xfflush(void);",
      "Comments": [
        "Description called at exit to flush open streams"
      ]
    },
    {
      "name": "AABBTV",
      "ord": 51,
      "Signature": "int aabbtv (void *recptr, long abspos, int keynum);",
      "Comments": [
        "'Acquire' a Btrieve record from a file position"
      ]
    },
    {
      "name": "ABORT",
      "ord": 52,
      "Signature" : "void abort(void);",
      "Comments": []
    },
    {
      "name": "ABSBTV",
      "ord": 53,
      "Signature": "long absbtv (void);",
      "Comments": [
        "Find current 'absolute' position"
      ]
    },
    {
      "name": "ACCACCT",
      "ord": 54,
      "Signature" : "void accacct(struct usracc *accptr,int plusor);",
      "Comments": []
    },
    {
      "name": "ACCBB",
      "ord": 55,
      "Signature": "BTVFILE *accbb;",
      "Comments": [
        "User Account Database BTRIEVE file pointer"
      ]
    },
    {
      "name": "ACCTMP",
      "ord": 56,
      "Signature" : "struct usracc acctmp;",
      "Comments": [
        "Temporary user account storage area"
      ]
    },
    {
      "name": "ACTVSCN",
      "ord": 57,
      "Signature" : "char *actvscn(int scnhdl);",
      "Comments": [
        "Make scnhdl the active screen for printfs"
      ]
    },
    {
      "name": "ACTVSCNSP",
      "ord": 58,
      "Signature" : "char *actvscnsp(int scnhdl,int x1,int y1,int x2,int y2,int scr);",
      "Comments": []
    },
    {
      "name": "ADDCRD",
      "ord": 59,
      "Signature": "int addcrd(char *keyuid,char *tckstg,int real);",
      "Comments": [
        "Utility for pasting credits to an account"
      ]
    },
    {
      "name": "ADDKYU",
      "ord": 60,
      "Signature" : "int addkyu(char *keyptr,int update);",
      "Comments": []
    },
    {
      "name": "ADDRES1",
      "ord": 61,
      "Signature": "char *addres1;",
      "Comments": [
        "Mailing Address Line 1 of the MajorBBS System"
      ]
    },
    {
      "name": "ADDRES2",
      "ord": 62,
      "Signature": "char *addres2;",
      "Comments": [
        "Mailing Address Line 2 of the MajorBBS System"
      ]
    },
    {
      "name": "ADDXRF",
      "ord": 63,
      "Signature" : "void addxrf(char *newuid)",
      "Comments": []
    },
    {
      "name": "ALCDUP",
      "ord": 64,
      "Signature": "char *alcdup(char *stg);",
      "Comments": [
        "Allocate new space for a string"
      ]
    },
    {
      "name": "ALCMEM",
      "ord": 65,
      "Signature": "char *alcmem(unsigned size);",
      "Comments": [
        "Dynamically allocate some memory"
      ]
    },
    {
      "name": "ALCRSZ",
      "ord": 66,
      "Signature": "char *alcrsz(void *mptr,unsigned oldsize,unsigned newsize);",
      "Comments": [
        "Reallocate space to a different size"
      ]
    },
    {
      "name": "ALCVDA",
      "ord": 67,
      "Signature" : "void alcvda(void);",
      "Comments": []
    },
    {
      "name": "ALCZER",
      "ord": 68,
      "Signature": "char *alczer(unsigned nbytes);",
      "Comments": [
        "Allocate new memory and zero it out"
      ]
    },
    {
      "name": "ALLDGS",
      "ord": 69,
      "Signature": "int alldgs(char *string);",
      "Comments": [
        "Determines if a string is all decimal (numeric) digits"
      ]
    },
    {
      "name": "ANPBTV",
      "ord": 70,
      "Signature": "int anpbtv (void *recptr, int anpopt);",
      "Comments": []
    },
    {
      "name": "ANSION",
      "ord": 71,
      "Signature": "void ansion(int on);",
      "Comments": [
        "Enable/Disable ANSI graphics",
        "1 == Process ANSI graphics sequences, 0 == Ignore"
      ]
    },
    {
      "name": "ANSSTG",
      "ord": 72,
      "Signature" : "char *ansstg[];",
      "Comments": [
        "ANSI support flavor strings"
      ]
    },
    {
      "name": "APPLYEM",
      "ord": 73,
      "Signature": "void applyem(char *filename);",
      "Comments": [
        "Sets the CNF options in the specified file"
      ]
    },
    {
      "name": "ASKTBL",
      "ord": 74,
      "Signature" : "int asktbl[][3];",
      "Comments": [
        "Table of signup question parameters"
      ]
    },
    {
      "name": "ATEXIT",
      "ord": 75,
      "Signature" : "int atexit(atexit_t func);",
      "Comments": [
        "atexit - registers termination function"
      ]
    },
    {
      "name": "ATOI",
      "ord": 76,
      "Signature": "int atoi (const char *str);",
      "Comments": [
        "Converts a string to an integer"
      ]
    },
    {
      "name": "ATOL",
      "ord": 77,
      "Signature": "long int atol(const char *str);",
      "Comments": [
        "Converts string to a long integer",
        "DX == High 16 bits, AX == Low 16 bits"
      ]
    },
    {
      "name": "AUDBB",
      "ord": 78,
      "Signature" : "BTVFILE *audbb;",
      "Comments": [
        "Btrieve file block pointer for audit trail"
      ]
    },
    {
      "name": "AUXCRT",
      "ord": 79,
      "Signature": "char *scnstt=auxcrt();",
      "Comments": [
        "Gets Auxiliary CRT address"
      ]
    },
    {
      "name": "AUXHDL",
      "ord": 80,
      "Signature" : "int auxhdl;",
      "Comments": [
        "Handle of screen on aux (0=none) "
      ]
    },
    {
      "name": "BACKHDL",
      "ord": 81,
      "Signature" : "int backhdl;",
      "Comments": [
        "Handle for background (on actvscns < 4000)"
      ]
    },
    {
      "name": "BAUDAT",
      "ord": 82,
      "Signature": "int baudat(unsigned baud,int blink);",
      "Comments": [
        "Set color attribute based on baud"
      ]
    },
    {
      "name": "BBSTTL",
      "ord": 83,
      "Signature": "char *bbsttl;",
      "Comments": [
        "Title of the MajorBBS System"
      ]
    },
    {
      "name": "BDSPEC",
      "ord": 84,
      "Signature" : "int bdspec(void);",
      "Comments": []
    },
    {
      "name": "BEGIN_POLLING",
      "ord": 85,
      "Signature" : "void begin_polling(int unum,void (*rouptr)());",
      "Comments": [
        "Turn on pulling for the specified user number channel"
      ]
    },
    {
      "name": "BELPER",
      "ord": 86,
      "Signature": "void belper(int pitch)",
      "Comments": [
        "Beep the operator console"
      ]
    },
    {
      "name": "BGNCNC",
      "ord": 87,
      "Signature": "void bgncnc();",
      "Comments": [
        "Begins command concatenation"
      ]
    },
    {
      "name": "OLDBGNEDT",
      "ord": 88,
      "Signature" : "int oldbgnedt();",
      "Comments": []
    },
    {
      "name": "BGNLOF",
      "ord": 89,
      "Signature" : "void bgnlof(void);",
      "Comments": []
    },
    {
      "name": "BOOTEM",
      "ord": 90,
      "Signature": "void bootem(char *who);",
      "Comments": [
        "Boot User-ID about to be killed"
      ]
    },
    {
      "name": "BYENOW",
      "ord": 91,
      "Signature": "void byenow(int msgnum, TYPE p1, TYPE p2,...,pn);",
      "Comments": [
        "Say good-bye to a user and disconnect (hang up)"
      ]
    },
    {
      "name": "CALCRC",
      "ord": 92,
      "Signature": "int calcrc(int crc,char byt);",
      "Comments": [
        "Iteratively calcuate a 16-bit CRC"
      ]
    },
    {
      "name": "CATAEXIT",
      "ord": 93,
      "Signature" : "void cataexit(void);",
      "Comments": []
    },
    {
      "name": "CATASTRO",
      "ord": 94,
      "Signature": "catastro(char * ctlstg, TYPE pl, TYPE p2,...,pn)",
      "Comments": [
        "Catastrophic Error, exit to DOS"
      ]
    },
    {
      "name": "CATFIX1",
      "ord": 95,
      "Signature" : "char *catfix1(void);",
      "Comments": []
    },
    {
      "name": "CATFIX2",
      "ord": 96,
      "Signature" : "char *catfix2(void);",
      "Comments": []
    },
    {
      "name": "CHANNEL",
      "ord": 97,
      "Signature": "int *channel;",
      "Comments": [
        "Array of chanel codes (as displayed)"
      ]
    },
    {
      "name": "CHGHOUR",
      "ord": 98,
      "Signature": "char *chghour;",
      "Comments": [
        "Connect time charge per hour"
      ]
    },
    {
      "name": "CHGMIN",
      "ord": 99,
      "Signature": "char *chgmin;",
      "Comments": [
        "Minimum charge"
      ]
    },
    {
      "name": "CHIMOVE",
      "ord": 100,
      "Signature": "void chimove(char *src,char *dst,register int cnt);",
      "Comments": [
        "Reentrant version of movemem()"
      ]
    },
    {
      "name": "CHISET",
      "ord": 101,
      "Signature" : "void chiset(char *dst,int cnt,char val);",
      "Comments": []
    },
    {
      "name": "CHKDFT",
      "ord": 102,
      "Signature" : "void chkdft(char c);",
      "Comments": []
    },
    {
      "name": "CHNEMD",
      "ord": 103,
      "Signature" : "int chnemd;",
      "Comments": [
        "Channel currently being emulated (-1=none)"
      ]
    },
    {
      "name": "CHOOSE",
      "ord": 104,
      "Signature" : "int choose(int n,char *chcs[],int upx,int upy,int lox,int loy,int escok);",
      "Comments": []
    },
    {
      "name": "CHOOUT",
      "ord": 105,
      "Signature" : "int choout(void);",
      "Comments": []
    },
    {
      "name": "CHOOWD",
      "ord": 106,
      "Signature" : "int choowd(char *chcs[],int fc,int upx,int upy,int lox,int loy,int escok);",
      "Comments": []
    },
    {
      "name": "CHROPT",
      "ord": 107,
      "Signature": "char ch=chropt(int msgnum);",
      "Comments": [
        "Get a single character from an MCV file"
      ]
    },
    {
      "name": "CLFILE",
      "ord": 108,
      "Signature" : "void clfile(void);",
      "Comments": []
    },
    {
      "name": "CLOCK",
      "ord": 109,
      "Signature" : "clock_t clock(void);",
      "Comments": []
    },
    {
      "name": "CLOSE",
      "ord": 110,
      "Signature" : "int close(int handle);",
      "Comments": [
        "close - close a file handle"
      ]
    },
    {
      "name": "CLREOL",
      "ord": 111,
      "Signature": "void clreol();",
      "Comments": [
        "Clear to end of line (in window)"
      ]
    },
    {
      "name": "CLRINP",
      "ord": 112,
      "Signature" : "void clrinp(void);",
      "Comments": []
    },
    {
      "name": "CLRPRF",
      "ord": 113,
      "Signature": "clrprf()",
      "Comments": [
        "This function resets the 'prfptr' to point to the beginning of prfbuf and stores a \\0 there."
      ]
    },
    {
      "name": "CLRXRF",
      "ord": 114,
      "Signature" : "void clrxrf(void);",
      "Comments": []
    },
    {
      "name": "CLS",
      "ord": 115,
      "Signature" : "void cls(char *buf,int atr);",
      "Comments": []
    },
    {
      "name": "CLSBB",
      "ord": 116,
      "Signature" : "BTVFILE *clsbb;",
      "Comments": [
        "'Class' btrieve block pointer"
      ]
    },
    {
      "name": "CLSBTV",
      "ord": 117,
      "Signature": "void clsbtv (struct btvblk *bbp);",
      "Comments": [
        "Closes a Btrieve file when finished"
      ]
    },
    {
      "name": "CLSHEAD",
      "ord": 118,
      "Signature" : "struct clstab *clshead;",
      "Comments": []
    },
    {
      "name": "CLSMSG",
      "ord": 119,
      "Signature": "void clsmsg(FILE *mbkprt);",
      "Comments": [
        "Closes an MCV file"
      ]
    },
    {
      "name": "CLSPTR",
      "ord": 120,
      "Signature" : "struct clstab *clsptr;",
      "Comments": [
        "Handle pointer"
      ]
    },
    {
      "name": "CNCALL",
      "ord": 121,
      "Signature": "char *cncall(void);",
      "Comments": [
        "Expect a variable-length word sequance (consume all remaining input)"
      ]
    },
    {
      "name": "CNCCHR",
      "ord": 122,
      "Signature": "char ch=cncchr();",
      "Comments": [
        "Expect a character from the user (converted to upper case)",
        "NULL if none"
      ]
    },
    {
      "name": "CNCHEX",
      "ord": 124,
      "Signature": "int cnchex(void);",
      "Comments": [
        "Expect a hexadecimal number from the user",
        "0 if none"
      ]
    },
    {
      "name": "CNCINT",
      "ord": 125,
      "Signature": "int n=cncint();",
      "Comments": [
        "Expect an integer from the user",
        "0 if none"
      ]
    },
    {
      "name": "CNCLON",
      "ord": 126,
      "Signature": "long ln=cnclon();",
      "Comments": [
        "Expect a long integer from the user",
        "0L if none"
      ]
    },
    {
      "name": "CNCNUM",
      "ord": 127,
      "Signature": "char *cncnum(void);",
      "Comments": [
        "Expect a decimal number with option '0' followed by decimal digits from the user",
        "No conversion takes place -- returns the ASCII string"
      ]
    },
    {
      "name": "CNCSIG",
      "ord": 128,
      "Signature": "char *signam=cncsig();",
      "Comments": [
        "Expect a forum name, with or without '/' prefix",
        "Always returns name with the '/' prefix"
      ]
    },
    {
      "name": "CNCUID",
      "ord": 129,
      "Signature": "char *uid=cncuid();",
      "Comments": [
        "Expect a User-ID or Forum name"
      ]
    },
    {
      "name": "CNCWRD",
      "ord": 130,
      "Signature": "char *wrd=cncwrd();",
      "Comments": [
        "Expect a space-delimited word",
        "Truncated if over 29 characters"
      ]
    },
    {
      "name": "CNCYESNO",
      "ord": 131,
      "Signature": "int yesno=cncyesno();",
      "Comments": [
        "Expect yes or no from the user",
        "'Y' == yes, 'N' == no"
      ]
    },
    {
      "name": "CNTDIR",
      "ord": 132,
      "Signature" : "void cntdir(char *path);",
      "Comments": [
        "Count the number of bytes and files in a directory"
      ]
    },
    {
      "name": "CNTRBTV",
      "ord": 133,
      "Signature": "long cntrbtv (void);",
      "Comments": []
    },
    {
      "name": "COFDAT",
      "ord": 134,
      "Signature": "int count=cofdat(int date);",
      "Comments": [
        "Counts the number of days since 1/1/80",
        "Input formatted as YYYYYYYMMMMDDDDD"
      ]
    },
    {
      "name": "COLOR",
      "ord": 135,
      "Signature" : "int color;",
      "Comments": [
        "Flag indicating color display available"
      ]
    },
    {
      "name": "COMPANY",
      "ord": 136,
      "Signature": "char *company;",
      "Comments": [
        "The Company name of the MajorBBS system"
      ]
    },
    {
      "name": "CONDEX",
      "ord": 137,
      "Signature": "void condex();",
      "Comments": [
        "Conditional exit to parent menu for afte rhandling concatenated commands"
      ]
    },
    {
      "name": "CORELEFT",
      "ord": 138,
      "Signature" : "unsigned coreleft(void);",
      "Comments": [
        "coreleft - returns a measure of unused memory"
      ]
    },
    {
      "name": "CPUTYPE",
      "ord": 139,
      "Signature": "int cpu=cputype();",
      "Comments": [
        "Returns the CPU type as 88, 186, 286, 386 (486 returns 386)"
      ]
    },
    {
      "name": "CPYKEY",
      "ord": 140,
      "Signature" : "void cpykey(char *dest,char *src,int len);",
      "Comments": [
        "Format data (src) for Btrieve use (dest)"
      ]
    },
    {
      "name": "CRDUSR",
      "ord": 141,
      "Signature": "int crdusr(char *keyuid,char *tckstg,int real,int affall);",
      "Comments": []
    },
    {
      "name": "CREATNEW",
      "ord": 142,
      "Signature" : "int creatnew(char *filename, int attrib);",
      "Comments": [
        "creatnew - creates a new file"
      ]
    },
    {
      "name": "CREATTEMP",
      "ord": 143,
      "Signature" : "int creattemp(const char *filename, int attrib);",
      "Comments": [
        "creattemp - creates a new file"
      ]
    },
    {
      "name": "CRTBTV",
      "ord": 144,
      "Signature": "void crtbtv (char *filnam, void *databuf, int lendbuf, int keyno);",
      "Comments": []
    },
    {
      "name": "CRTCLASS",
      "ord": 145,
      "Signature" : "int crtclass(struct acclass *cptr);",
      "Comments": [
        "Add a class to class table and file"
      ]
    },
    {
      "name": "CURCURS",
      "ord": 146,
      "Signature" : "int curcurs(void);",
      "Comments": []
    },
    {
      "name": "CURCURX",
      "ord": 147,
      "Signature": "int curcurx();",
      "Comments": [
        "Gets the current cursor X coordinate"
      ]
    },
    {
      "name": "CURCURY",
      "ord": 148,
      "Signature": "int curcury();",
      "Comments": [
        "Gets the current cursor Y coordinate"
      ]
    },
    {
      "name": "CURSACT",
      "ord": 149,
      "Signature": "void cursact(int moveit);",
      "Comments": [
        "Enable moving of blinking cursor",
        "1 = move blinking cursor, 0 = still"
      ]
    },
    {
      "name": "CURSIZ",
      "ord": 150,
      "Signature" : "void cursiz(int howbig);",
      "Comments": []
    },
    {
      "name": "CURUSR",
      "ord": 151,
      "Signature": "void curusr(int newunum);",
      "Comments": [
        "Change to a different user number"
      ]
    },
    {
      "name": "CVTSCN",
      "ord": 152,
      "Signature" : "char *cvtscn(void *where);",
      "Comments": []
    },
    {
      "name": "DATAPH",
      "ord": 153,
      "Signature": "char *dataph;",
      "Comments": [
        "The first phone line connected to the MajorBBS system"
      ]
    },
    {
      "name": "DATOFC",
      "ord": 154,
      "Signature": "int date=datofc(int count);",
      "Comments": [
        "Compute DOS date",
        "Return formatted as YYYYYYYMMMMDDDDD"
      ]
    },
    {
      "name": "DAYTODAY",
      "ord": 155,
      "Signature": "int daytoday(void);",
      "Comments": [
        "Returns the day of the week 0->6 Sunday->Saturday"
      ]
    },
    {
      "name": "DBYTES",
      "ord": 156,
      "Signature" : "char *dbytes(long bytes);",
      "Comments": []
    },
    {
      "name": "DCDATE",
      "ord": 157,
      "Signature": "int date=dcdate(char *ascdat);",
      "Comments": [
        "Decode string date formatted 'MM/DD/YY' to int format YYYYYYYMMMMDDDDD"
      ]
    },
    {
      "name": "DCLVDA",
      "ord": 158,
      "Signature": "void dclvda(int nbytes);",
      "Comments": [
        "Declare size of the Volatile Data Area (Maximum size the modeule will require)"
      ]
    },
    {
      "name": "DCTIME",
      "ord": 159,
      "Signature" : "int dctime(char *timstr);",
      "Comments": []
    },
    {
      "name": "DEDCRD",
      "ord": 160,
      "Signature": "int enuf=dedcrd(long amount, int asmuch);",
      "Comments": [
        "Deduct credits from current user's account",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "DELACCT",
      "ord": 161,
      "Signature" : "int delacct(char *userid);",
      "Comments": [
        "'Delete an account from system' routine"
      ]
    },
    {
      "name": "DELBTV",
      "ord": 162,
      "Signature": "void delbtv();",
      "Comments": [
        "Delete current Btrieve record"
      ]
    },
    {
      "name": "DELXRF",
      "ord": 163,
      "Signature" : "void delxrf(char *userid);",
      "Comments": []
    },
    {
      "name": "DEPAD",
      "ord": 164,
      "Signature": "int nremoved=depad(char *string);",
      "Comments": [
        "Removes trailing blank spaces from string"
      ]
    },
    {
      "name": "DFLTASCN",
      "ord": 165,
      "Signature" : "int dfltascn;",
      "Comments": [
        "Default AUX screen to show"
      ]
    },
    {
      "name": "DFLTMSCN",
      "ord": 166,
      "Signature" : "int dfltmscn;",
      "Comments": [
        "Default main screen to show"
      ]
    },
    {
      "name": "DFSTHN",
      "ord": 167,
      "Signature": "void dfsthn();",
      "Comments": [
        "Default Status Handler for status conditions this module is not specifically expecting"
      ]
    },
    {
      "name": "DFTBEL",
      "ord": 168,
      "Signature" : "void dftbel(int local);",
      "Comments": []
    },
    {
      "name": "DIGALW",
      "ord": 169,
      "Signature" : "int digalw;",
      "Comments": [
        "Digits allowed in User-IDs?"
      ]
    },
    {
      "name": "DINSBTV",
      "ord": 170,
      "Signature": "int dinsbtv (void *recptr);",
      "Comments": [
        "(more tolerant) Insert a new Btrieve record"
      ]
    },
    {
      "name": "DISPAG",
      "ord": 171,
      "Signature" : "void dispag(char *pagnam);",
      "Comments": []
    },
    {
      "name": "DLTCLS",
      "ord": 172,
      "Signature" : "void dltcls(struct clstab *tabptr);",
      "Comments": [
        "Delete an existing class"
      ]
    },
    {
      "name": "DOSTOUNIX",
      "ord": 173,
      "Signature" : "long dostounix(struct date *d, struct time *t);",
      "Comments": [
        "dostounix - converts date and time to UNIX time format"
      ]
    },
    {
      "name": "DSAIRP",
      "ord": 174,
      "Signature": "dsairp()",
      "Comments": [
        "Disable Interrupts"
      ]
    },
    {
      "name": "DSKFRE",
      "ord": 175,
      "Signature" : "long dskfre(int drive);",
      "Comments": []
    },
    {
      "name": "DSPCHC",
      "ord": 176,
      "Signature": "void dspchc(void);",
      "Comments": [
        "Number of bytes free on a drive",
        "drive 0==defailt, 1==A:, 2==B:, 3==C:, etc."
      ]
    },
    {
      "name": "DSPMNU",
      "ord": 177,
      "Signature" : "int dspmnu(int lngmnu);",
      "Comments": []
    },
    {
      "name": "DSPMSG",
      "ord": 178,
      "Signature" : "void dspmsg(msgno,parm1,parm2,parm3);",
      "Comments": [
        "Display Message based on ANSI flag"
      ]
    },
    {
      "name": "DTRACK",
      "ord": 179,
      "Signature" : "unsigned dtrack;",
      "Comments": [
        "Number of HOURS since stats were zero'd"
      ]
    },
    {
      "name": "DUPDBTV",
      "ord": 180,
      "Signature": "int dupdbtv (void *recptr);",
      "Comments": [
        "(more tolerant) update current record",
        "1 == updated, 0 == duplicate collision"
      ]
    },
    {
      "name": "ECHON",
      "ord": 181,
      "Signature": "echon();",
      "Comments": [
        "Turns echo on for this channel"
      ]
    },
    {
      "name": "ECHONU",
      "ord": 182,
      "Signature": "void echonu(int usrnum);",
      "Comments": [
        "Turns on echo utility for the specified user"
      ]
    },
    {
      "name": "EDTCHC",
      "ord": 183,
      "Signature" : "int edtchc(int sx,int sy,char *sval,char *chcs[],int flags);",
      "Comments": []
    },
    {
      "name": "OLDEDTIMR",
      "ord": 184,
      "Signature" : "void oldedtimr(int (*imradr)());",
      "Comments": [
        "API for binary compatibility"
      ]
    },
    {
      "name": "EDTVAL",
      "ord": 185,
      "Signature" : "int edtval(int sx,int sy,int maxlen,char *sval,int (*valrou)(),int flags);",
      "Comments": []
    },
    {
      "name": "EMLSDROU",
      "ord": 186,
      "Signature" : "void (*emlsdrou)();",
      "Comments": [
        "Send Email to Sysop/ New User routine"
      ]
    },
    {
      "name": "EMUBEL",
      "ord": 187,
      "Signature" : "int emubel;",
      "Comments": [
        "Emulation bell period"
      ]
    },
    {
      "name": "EMUCHN",
      "ord": 188,
      "Signature" : "void emuchn(int chn2em);",
      "Comments": []
    },
    {
      "name": "ENAIRP",
      "ord": 189,
      "Signature": "void enairp()",
      "Comments": [
        "Enable Interrupts"
      ]
    },
    {
      "name": "ENAPAG",
      "ord": 190,
      "Signature" : "void enapag(char *pagnam);",
      "Comments": []
    },
    {
      "name": "ENDCNC",
      "ord": 191,
      "Signature": "int done=endcnc();",
      "Comments": [
        "Checks if the user has completed their command (started by bgncnc())",
        "1 == done, 2 == there's more"
      ]
    },
    {
      "name": "EOF",
      "ord": 192,
      "Signature" : "int eof(int handle);",
      "Comments": [
        "eof - detects end-of-file"
      ]
    },
    {
      "name": "ERRCOD",
      "ord": 193,
      "Signature": "int errcod;",
      "Comments": [
        "MS-DOS exit code (for batch files)"
      ]
    },
    {
      "name": "EURMSK",
      "ord": 194,
      "Signature": "char eurmsk;",
      "Comments": [
        "0x7F if U.S.A. only, 0xFF if European"
      ]
    },
    {
      "name": "EXIMOD",
      "ord": 195,
      "Signature" : "jmp_buf eximod;",
      "Comments": [
        "Exit-Module Longjmp save Block"
      ]
    },
    {
      "name": "EXIT",
      "ord": 196,
      "Signature" : "void ___exit(int quick, int dontexit, int errcode);",
      "Comments": [
        "___exit - perform cleanup and optionally terminate the program"
      ]
    },
    {
      "name": "EXPAND",
      "ord": 197,
      "Signature" : "void * _expand(void *block, size_t size);",
      "Comments": [
        "_expand - grow or shrink a block in place"
      ]
    },
    {
      "name": "EXPLODE",
      "ord": 198,
      "Signature" : "void explode(char *sctptr,int wulx,int wuly,int wlrx,int wlry);",
      "Comments": []
    },
    {
      "name": "EXPLODELL",
      "ord": 199,
      "Comments": []
    },
    {
      "name": "EXPLODETO",
      "ord": 200,
      "Signature" : "void explodeto(char *sptr,int fux,int fuy,int flx,int fly,int tux,int tuy);",
      "Comments": []
    },
    {
      "name": "FARCORELEFT",
      "ord": 201,
      "Signature" : "long farcoreleft(void);",
      "Comments": []
    },
    {
      "name": "FARFREE",
      "ord": 202,
      "Signature" : "void farfree(void *p);",
      "Comments": []
    },
    {
      "name": "FARMALLOC",
      "ord": 203,
      "Signature" : "char *farmalloc(unsigned long size);",
      "Comments": []
    },
    {
      "name": "FARREALLOC",
      "ord": 204,
      "Signature" : "void far * _farreallocf (void far *block, unsigned long size, unsigned flags);",
      "Comments": []
    },
    {
      "name": "FCLOSE",
      "ord": 205,
      "Signature": "int fclose(FILE* stream );",
      "Comments": [
        "Closes the file associated with the stream and disassociates it."
      ]
    },
    {
      "name": "FDOPEN",
      "ord": 206,
      "Signature" : "FILE *fdopen(int handle, char *type);",
      "Comments": [
        "fdopen -  associates a stream with a file handle"
      ]
    },
    {
      "name": "FFLUSH",
      "ord": 207,
      "Signature" : "int fflush(FILE *stream);",
      "Comments": [
        "fflush - flushes a stream"
      ]
    },
    {
      "name": "_FGETC",
      "ord": 208,
      "Signature": "int fgetc (FILE *stream );",
      "Comments": [
        "Returns the character currently pointed by the internal file position indicator of the specified stream"
      ]
    },
    {
      "name": "FGETCHAR",
      "ord": 209,
      "Signature" : "int fgetchar(void);",
      "Comments": [
        "fgetchar - gets character from stream"
      ]
    },
    {
      "name": "FGETS",
      "ord": 210,
      "Signature": "char* fgets(char* str, int num, FILE* stream );",
      "Comments": [
        "Reads characters from stream as a C string into str until (num-1) characters have been read or either a newline or the end-of-file is reached"
      ]
    },
    {
      "name": "FILELENGTH",
      "ord": 211,
      "Signature" : "long filelength(int handle);",
      "Comments": [
        "filelength - gets file size in bytes"
      ]
    },
    {
      "name": "FILEUP",
      "ord": 212,
      "Signature" : "void fileup(char *fname, char *prot, int (*fuphdl)(int fupcod));",
      "Comments": [
        "Begin file upload session"
      ]
    },
    {
      "name": "FINDMOD",
      "ord": 213,
      "Signature" : "int findmod(char *name);",
      "Comments": []
    },
    {
      "name": "FINDSTG",
      "ord": 214,
      "Signature" : "int findstg(char *stg, char *body);",
      "Comments": []
    },
    {
      "name": "FINDTVAR",
      "ord": 215,
      "Signature": "int findtvar(char *name);",
      "Comments": [
        "Find text variable & return number"
      ]
    },
    {
      "name": "FLDNMI",
      "ord": 216,
      "Signature" : "char * fldnmi(int fldi);",
      "Comments": [
        "Extract field name based on field number"
      ]
    },
    {
      "name": "FLL1ST",
      "ord": 217,
      "Signature" : "int fll1st(struct fllblk *flp, char *prefix, char *list);",
      "Comments": [
        "Find first DOS file in a list"
      ]
    },
    {
      "name": "FLLNXT",
      "ord": 218,
      "Signature" : "int fllnxt(struct fllblk *flp);",
      "Comments": []
    },
    {
      "name": "FLLSPC",
      "ord": 219,
      "Comments": []
    },
    {
      "name": "FLUSHALL",
      "ord": 220,
      "Signature" : "int flushall(void);",
      "Comments": [
        "flushall - clears all buffers"
      ]
    },
    {
      "name": "FMTX3",
      "ord": 221,
      "Signature" : "int fmtx3(char *prmstg);",
      "Comments": []
    },
    {
      "name": "FNDCLS",
      "ord": 222,
      "Signature" : "struct clstab *fndcls(char *clsname);",
      "Comments": [
        "Find this guy's class in the table"
      ]
    },
    {
      "name": "FNDKEY",
      "ord": 224,
      "Signature" : "int fndkey(char *lock,char *keylist,int remove);",
      "Comments": []
    },
    {
      "name": "F_OPEN",
      "ord": 225,
      "Signature": "file* fopen(const char* filename, USE);",
      "Comments": [
        "Opens a file for reading, but differs from C++ standard fopen() by taking 2nd parameter",
        "2nd Parameter determines how the file will be used"
      ]
    },
    {
      "name": "F_PRINTF",
      "ord": 226,
      "Signature": "int fprintf ( FILE * stream, const char * format, ... );",
      "Comments": [
        "Writes the C string pointed by format to the stream."
      ]
    },
    {
      "name": "F_PUTC",
      "ord": 227,
      "Signature": "int fputc(int character, FILE *stream );",
      "Comments": [
        "Write the input character to the specified stream"
      ]
    },
    {
      "name": "F_PUTCHAR",
      "ord": 228,
      "Signature": "int putchar ( int character );",
      "Comments": [
        "Writes a character to the standard output (stdout)."
      ]
    },
    {
      "name": "F_READ",
      "ord": 229,
      "Signature": "size_t fread(void* ptr, size_t size, size_t count, FILE* stream );",
      "Comments": [
        "Reads an array of count elements, each one with a size of size bytes, from the stream and stores them in the block of memory specified by ptr."
      ]
    },
    {
      "name": "GALFREE",
      "ord": 230,
      "Signature" : "void galfree(void *block);",
      "Comments": [
        "Galacticomm's free() for debugging"
      ]
    },
    {
      "name": "FRZSEG",
      "ord": 231,
      "Signature" : "char *frzseg(void);",
      "Comments": []
    },
    {
      "name": "FSCANF",
      "ord": 232,
      "Signature" : "int fscanf(FILE *stream, const char *format[, argument,...]);",
      "Comments": [
        "fscanf - performs formatted input from a stream"
      ]
    },
    {
      "name": "FSDANS",
      "ord": 233,
      "Signature": "void fsdans(char *oldans);",
      "Comments": [
        "Install answer string & compute ansoff,anslen fields (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDAPR",
      "ord": 234,
      "Signature": "void fsdapr(char *sesbuf, int sbleng, char *answers)",
      "Comments": [
        "Prepare answers (call after fsdroom()) (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDBD1",
      "ord": 235,
      "Signature": "void fsdbd1(char *answers);",
      "Comments": [
        "1st step to building an answer string (Full Screen Data Entry)"
      ]
    },
    {
      "name": "FSDBDF",
      "ord": 236,
      "Signature": "void fsdbdf(int fldno);",
      "Comments": [
        "Build answer string from field # from recent session (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDBDN",
      "ord": 237,
      "Signature": "void fsdbdn(char *name, char *value);",
      "Comments": [
        "Next step to building an answer string (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDBKG",
      "ord": 238,
      "Signature": "void fsdbkg(char *templt);",
      "Comments": [
        "Display background for Full-Screen entry mode (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDDAN",
      "ord": 239,
      "Signature": "void fsddan();",
      "Comments": [
        "Delete answer just found by fsdxan() from its answer string (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDDSP",
      "ord": 240,
      "Signature": "void fsddsp(char *templt);",
      "Comments": [
        "Display screen & filled-in fields (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDEGO",
      "ord": 241,
      "Signature": "void fsdego(int (*fldvfy)(int fldno, char *answer), void (*whndun)(int save));",
      "Comments": [
        "Begin Full-Screen Data Entry session (call after fsdroom(), fsdapr())"
      ]
    },
    {
      "name": "FSDEMG",
      "ord": 242,
      "Signature": "char fsdemg[];",
      "Comments": [
        "Error message for fsdppc(), fsdprc(), etc. (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDENT",
      "ord": 243,
      "Signature": "void fsdent(int inifld);",
      "Comments": [
        "Begin Full-Screen Data Entry session (ANSI-only)"
      ]
    },
    {
      "name": "FSDFXT",
      "ord": 244,
      "Signature": "char *stg=fsdfxt(int fldno, char *buffer, int maxlen);",
      "Comments": [
        "Store answer for field into buffer (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDINC",
      "ord": 245,
      "Signature": "void fsdinc(int c);",
      "Comments": [
        "Handle incoming character (ANSI-only) (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDINI",
      "ord": 246,
      "Signature": "void fsdini();",
      "Comments": [
        "Power-up init for Full Scren Data Entry software"
      ]
    },
    {
      "name": "FSDLIN",
      "ord": 247,
      "Signature": "void fsdlin();",
      "Comments": [
        "Begin data entry for non-ANSI (ASCII-only) users (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDMAN",
      "ord": 248,
      "Signature": "void fsdman(char *ansstg);",
      "Comments": [
        "Stuff more answers into current session (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDNAN",
      "ord": 249,
      "Signature": "char *stg=fsdnan(int fldno);",
      "Comments": [
        "Get a field's answer (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDNFY",
      "ord": 250,
      "Signature": "void fsdnfy();",
      "Comments": [
        "Notify system to call fsdprc() when it can (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDOBA",
      "ord": 251,
      "Signature": "int fsdoba();",
      "Comments": [
        "Number of output buffer bytes available"
      ]
    },
    {
      "name": "FSDORD",
      "ord": 252,
      "Signature": "int fsdord(int fldi);",
      "Comments": [
        "Returns ordinal value of multiple-choice answer, per field spec (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDOUC",
      "ord": 253,
      "Signature": "void fsdouc(char c);",
      "Comments": [
        "Display a Character (Full-Screen Data Entry"
      ]
    },
    {
      "name": "FSDOUS",
      "ord": 254,
      "Signature": "void fsddous(char *str);",
      "Comments": [
        "Display String (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDPAN",
      "ord": 255,
      "Signature" : "void fsdpan(char *answer, char *name, char *value);",
      "Comments": [
        "Put answer into answer string (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDPPC",
      "ord": 256,
      "Signature" : "int fsdppc(char *templt, int ascn);",
      "Comments": [
        "Preprocess field information, in prep for fsdent() (Full-Screen Data Entry)"
      ]
    },
    {
      "name": "FSDPRC",
      "ord": 257,
      "Signature" : "int fsdprc(void)",
      "Comments": []
    },
    {
      "name": "FSDQDP",
      "ord": 258,
      "Signature" : "void fsdqdp(void);",
      "Comments": [
        "low-level initiation of redisplay of entire screen"
      ]
    },
    {
      "name": "FSDQOE",
      "ord": 259,
      "Signature" : "void fsdqoe(void);",
      "Comments": [
        "Report that the quick output buffer has gone empty"
      ]
    },
    {
      "name": "FSDRFT",
      "ord": 260,
      "Signature" : "char *fsdrft(void);",
      "Comments": []
    },
    {
      "name": "FSDROOM",
      "ord": 261,
      "Signature": "int fsdroom(int tmpmsg, char *fldspc, int amode);",
      "Comments": [
        "Returns number of bytes session will need, or -1=error in data"
      ]
    },
    {
      "name": "FSDSAN",
      "ord": 262,
      "Signature" : "int fsdsan(int fldi, char *value);",
      "Comments": [
        "Set answer to new value (Full Screen Data Entry)"
      ]
    },
    {
      "name": "FSDSCB",
      "ord": 263,
      "Signature" : "void inifsdscb(void);",
      "Comments": [
        "Allocate fsd user array, if not done so already (Full Screen Data Entry)"
      ]
    },
    {
      "name": "FSDUSR",
      "ord": 264,
      "Signature" : "struct fsdbbs *fsdusr;",
      "Comments": [
        "Array of stuff for current user"
      ]
    },
    {
      "name": "FSDXAN",
      "ord": 265,
      "Signature" : "char *fsdxan(char *answer, char *name)",
      "Comments": [
        "no-preparation- extract answer from answer string (Full Screen Data Entry)"
      ]
    },
    {
      "name": "FSEEK",
      "ord": 266,
      "Signature": "int fseek ( FILE * stream, long int offset, int origin );",
      "Comments": [
        "Sets the position indicator associated with the stream to a new position."
      ]
    },
    {
      "name": "FTELL",
      "ord": 267,
      "Signature": "long int ftell(FILE *stream );",
      "Comments": [
        "Gets the current position in the stream"
      ]
    },
    {
      "name": "FTFABT",
      "ord": 268,
      "Signature" : "void ftfabt(char *why);",
      "Comments": [
        "(File Transfer) Abort transfer session (hi level)"
      ]
    },
    {
      "name": "FTFAHD",
      "ord": 269,
      "Signature" : "void ftfahd(int nstate, int ticks);",
      "Comments": [
        "(File Transfer) transit to a new sub-state & quickly time out"
      ]
    },
    {
      "name": "FTFBUF",
      "ord": 270,
      "Signature" : "char *ftfbuf;",
      "Comments": [
        "(File Transfer) Very Short-Term Buffer"
      ]
    },
    {
      "name": "FTFCAN",
      "ord": 271,
      "Signature" : "void ftfcan(void);",
      "Comments": [
        "(File Transfer) Cancel file transfer, send ^X's to the other party"
      ]
    },
    {
      "name": "FTFCLI",
      "ord": 272,
      "Signature" : "void ftfcli(void);",
      "Comments": [
        "(File Transfer) Clear input buffer"
      ]
    },
    {
      "name": "FTFCLO",
      "ord": 273,
      "Signature" : "void ftfclo(void);",
      "Comments": [
        "(File Transfer) Clear output buffer"
      ]
    },
    {
      "name": "FTFNEW",
      "ord": 274,
      "Signature" : "void ftfnew(int nstate);",
      "Comments": [
        "(File Transfer) Transition to a new sub-state of the transfer session"
      ]
    },
    {
      "name": "FTFNWP",
      "ord": 275,
      "Signature" : "void ftfnwp(void);",
      "Comments": [
        "(File Transfer) New Packet Received"
      ]
    },
    {
      "name": "FTFOBA",
      "ord": 276,
      "Signature" : "int ftfoba(void);",
      "Comments": [
        "(File Transfer) Output buffer bytes available, how many?"
      ]
    },
    {
      "name": "FTFOUS",
      "ord": 277,
      "Signature" : "void ftfous(char *string);",
      "Comments": [
        "(File Transfer) Transmit ASCII string (used during ASCII sessions)"
      ]
    },
    {
      "name": "FTFOUT",
      "ord": 278,
      "Signature" : "void ftfout(char *data, int nbytes);",
      "Comments": [
        "(File Transfer) Transmit binary bytes (used during non-ASCII sessions)"
      ]
    },
    {
      "name": "FTFRCA",
      "ord": 279,
      "Signature" : "void ftfrca(void);",
      "Comments": [
        "(File Transfer) Make sure ftfrcl() gets called"
      ]
    },
    {
      "name": "FTFRCL",
      "ord": 280,
      "Signature" : "void ftfrcl(int ok);",
      "Comments": [
        "(File Transfer) Close file after receiving"
      ]
    },
    {
      "name": "FTFREX",
      "ord": 281,
      "Signature" : "int ftfrex(void);",
      "Comments": [
        "(File Transfer) Check if file to be received exists already"
      ]
    },
    {
      "name": "FTFROP",
      "ord": 282,
      "Signature" : "int ftfrop(int append, int ascii, int resume);",
      "Comments": [
        "(File Transfer) Open file for reception and writing"
      ]
    },
    {
      "name": "FTFRRD",
      "ord": 283,
      "Signature" : "int ftfrrd(char *datbuf, int nbytes);",
      "Comments": [
        "(File Transfer) Read bytes from file before receiving & overwriting them"
      ]
    },
    {
      "name": "FTFRSK",
      "ord": 284,
      "Signature" : "void ftfrsk(long pos);",
      "Comments": [
        "(File Transfer) Seek a position in the file for receiving & writing to"
      ]
    },
    {
      "name": "FTFRSQ",
      "ord": 285,
      "Signature" : "void ftfrsq(char *reason);",
      "Comments": [
        "(File Transfer) Report that a file will be gracfully skipped"
      ]
    },
    {
      "name": "FTFRWB",
      "ord": 286,
      "Signature" : "int ftfrwb(char ch);",
      "Comments": [
        "(File Transfer) Write 1 received byte into file"
      ]
    },
    {
      "name": "FTFRWR",
      "ord": 287,
      "Signature" : "int ftfrwr(char *data, int nbytes);",
      "Comments": [
        "(File Transfer) Write received bytes into file"
      ]
    },
    {
      "name": "FTFSCB",
      "ord": 288,
      "Signature" : "struct ftfscb {...};",
      "Comments": [
        "(File Transfer) Contains fields for external use"
      ]
    },
    {
      "name": "FTFSRT",
      "ord": 289,
      "Signature" : "void ftfsrt(void);",
      "Comments": [
        "(File Transfer) Start a(nother) transmitable file"
      ]
    },
    {
      "name": "FTFSTF",
      "ord": 290,
      "Signature" : "void ftfstf(void);",
      "Comments": [
        "(File Transfer) Start file counters from scratch"
      ]
    },
    {
      "name": "FTFXCA",
      "ord": 291,
      "Signature" : "void ftfxca(void);",
      "Comments": [
        "(File Transfer) Make sure ftfxcl() gets called"
      ]
    },
    {
      "name": "FTFXCL",
      "ord": 292,
      "Signature" : "void ftfxcl(int ok);",
      "Comments": [
        "(File Transfer) Close file after transmitting"
      ]
    },
    {
      "name": "FTFXLK",
      "ord": 293,
      "Signature" : "void ftfxlk(int on);",
      "Comments": [
        "(File Tranfer) Lock output"
      ]
    },
    {
      "name": "FTFXOP",
      "ord": 294,
      "Signature" : "int ftfxop(void);",
      "Comments": [
        "(File Transfer) Open file for reading and transmitting"
      ]
    },
    {
      "name": "FTFXRB",
      "ord": 295,
      "Signature" : "int ftfxrb(void);",
      "Comments": [
        "(File Transfer) Read 1 byte from file for transmitting"
      ]
    },
    {
      "name": "FTFXRD",
      "ord": 296,
      "Signature" : "int ftfxrd(char *datbuf, int nbytes);",
      "Comments": [
        "(File Transfer) Read bytes from file for transmitting"
      ]
    },
    {
      "name": "FTFXRL",
      "ord": 297,
      "Signature" : "int ftfxrl(char *datbuf, int nbytes);",
      "Comments": [
        "(File Transfer) Read a line from an ASCII file for transmitting"
      ]
    },
    {
      "name": "FTFXSK",
      "ord": 298,
      "Signature" : "void ftfxsk(long pos);",
      "Comments": [
        "Seek a position in the file for transmission"
      ]
    },
    {
      "name": "FTFXSQ",
      "ord": 299,
      "Signature" : "void ftfxsq(char *reason);",
      "Comments": [
        "(File Transfer) Report that a file will be gracfully skipped"
      ]
    },
    {
      "name": "FTFZAD",
      "ord": 300,
      "Signature" : "int ftfzad(char c);",
      "Comments": [
        "(File Transfer) Check for automatic ZMODEM download"
      ]
    },
    {
      "name": "FTGDNL",
      "ord": 301,
      "Signature" : "void ftgdnl(char *prot, void (*retrou)(void));",
      "Comments": [
        "(File Transfer) Download all tagged files (or untag, etc.)"
      ]
    },
    {
      "name": "FTGNEW",
      "ord": 302,
      "Signature" : "int ftgnew(void);",
      "Comments": [
        "(File Transfer) Issue a new tagspec pointer"
      ]
    },
    {
      "name": "FTGNUM",
      "ord": 303,
      "Signature" : "int ftgnum(void);",
      "Comments": [
        "(File Transfer) Number of tagged files for this user"
      ]
    },
    {
      "name": "FTGPTR",
      "ord": 304,
      "Signature" : "struct ftg *ftgptr;",
      "Comments": [
        "(File Transfer) Global Tagspec Pointer"
      ]
    },
    {
      "name": "FTGSBM",
      "ord": 305,
      "Signature" : "int ftgsbm(char *prot)",
      "Comments": [
        "(File Transfer) Submit a tagspec for download"
      ]
    },
    {
      "name": "FTGSHO",
      "ord": 306,
      "Signature" : "void ftgsho(void);",
      "Comments": [
        "(File Transfer) List out the tagged files (caller calls outprf())"
      ]
    },
    {
      "name": "FTGUSR",
      "ord": 307,
      "Signature" : "struct ftg *ftgusr;",
      "Comments": [
        "(File Transfer) Global ptr to user's ftg array"
      ]
    },
    {
      "name": "FTPLOG",
      "ord": 308,
      "Signature": "void ftplog(struct ftfpsp *ftp);",
      "Comments": [
        "(File Transfer) Log in a new protocol specification",
        "Put it after all others"
      ]
    },
    {
      "name": "FTPLOGH",
      "ord": 309,
      "Signature" : "void ftplogh(struct ftfpsp *ftp);",
      "Comments": [
        "(File Transfer) Log in a new protocol specification",
        "Put it BEFORE all others"
      ]
    },
    {
      "name": "FTUPTR",
      "ord": 310,
      "Signature" : "struct ftuser *ftuptr;",
      "Comments": [
        "(File Transfer) FILEXFER.C stuff for current user"
      ]
    },
    {
      "name": "FUPKIL",
      "ord": 311,
      "Signature" : "void fupkil(void);",
      "Comments": [
        "(File Transfer) Prep for kill from remote sysop"
      ]
    },
    {
      "name": "FWRITE",
      "ord": 312,
      "Signature": "size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );",
      "Comments": [
        "Writes an array of count elements, each one with a size of size bytes, from the block of memory pointed by ptr to the current position in the stream."
      ]
    },
    {
      "name": "GABBTV",
      "ord": 313,
      "Signature": "void garbbtv(char *recptr, long abspos, intkeynum);",
      "Comments": [
        "Get a Btrieve record by 'absolute' position"
      ]
    },
    {
      "name": "GEN_HASKEY",
      "ord": 314,
      "Signature": "int ok=gen_haskey(char *lock, int unum, struct user *uptr);",
      "Comments": [
        "Does this user have the key to this lock?"
      ]
    },
    {
      "name": "GENRDN",
      "ord": 315,
      "Signature": "int genrdn(int min,int max);",
      "Comments": [
        "Generates a random number between min and max"
      ]
    },
    {
      "name": "GETASC",
      "ord": 316,
      "Signature": "char *bufadr=getasc(int msgnum);",
      "Comments": [
        "Read value of CNF option (text blocks with ASCII compatible line terminators)"
      ]
    },
    {
      "name": "GETBTV",
      "ord": 317,
      "Signature": "void getbtv(char *recptr, char *key, int keynum, int getopt);",
      "Comments": [
        "Get a Btrieve record (bomb if not there)"
      ]
    },
    {
      "name": "GETCH",
      "ord": 318,
      "Signature" : "int getch(void);",
      "Comments": []
    },
    {
      "name": "GETCHC",
      "ord": 319,
      "Signature" : "int getchc(void);",
      "Comments": []
    },
    {
      "name": "GETDATE",
      "ord": 320,
      "Signature" : "void getdate(struct date *dateblk);",
      "Comments": [
        "getdate - gets MS-DOS date"
      ]
    },
    {
      "name": "GETDTD",
      "ord": 321,
      "Signature": "long timendate=getdtd(int handle);",
      "Comments": [
        "Returns a file date and time",
        "handle from a fopen()'d file"
      ]
    },
    {
      "name": "GETENV",
      "ord": 322,
      "Signature": "char* getenv(const char* name);",
      "Comments": [
        "Retrieves a C-string containing the value of the environment variable whose name is specified in the argument"
      ]
    },
    {
      "name": "GETIN",
      "ord": 324,
      "Signature" : "char *getin(void);",
      "Comments": []
    },
    {
      "name": "GETLST",
      "ord": 325,
      "Signature" : "int getlst(char *uid,char *buffer);",
      "Comments": []
    },
    {
      "name": "GETMSG",
      "ord": 326,
      "Signature": "char *bufard=getmsg(msgnum);",
      "Comments": [
        "Read value of CNF option"
      ]
    },
    {
      "name": "GETTIME",
      "ord": 327,
      "Signature" : "void gettime(struct time *timep);",
      "Comments": [
        "gettime - gets MS-DOS time"
      ]
    },
    {
      "name": "GETTND",
      "ord": 328,
      "Signature": "long gmt70=gettnd(int handle);",
      "Comments": [
        "Returns a file's date and time (GMT)"
      ]
    },
    {
      "name": "GIVKEY",
      "ord": 329,
      "Signature" : "int givkey(char *uid,char *keylist);",
      "Comments": []
    },
    {
      "name": "GLOBALCMD",
      "ord": 330,
      "Signature": "void globalcmd(ing (*rouptr)());",
      "Comments": [
        "Defines a global command handler routine"
      ]
    },
    {
      "name": "GMDNAM",
      "ord": 331,
      "Signature": "char *gmdnam(char *mdfnam);",
      "Comments": [
        "Get's a module's name from the specified .MDF file"
      ]
    },
    {
      "name": "GOPAGE",
      "ord": 332,
      "Signature": "int gopage(char *pagnam,int lngmnu,int reting);",
      "Comments": [
        "Jump to a specific page (or file)"
      ]
    },
    {
      "name": "GRBTXV",
      "ord": 333,
      "Signature" : "int grbtxv(char *buffer);",
      "Comments": []
    },
    {
      "name": "HASKEY",
      "ord": 334,
      "Signature": "int haskey(lock);",
      "Comments": [
        "Does the user have the specified key"
      ],
      "SignatureFormat": "int haskey({0});",
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "int",
          "Name": "Lock"
        }
      ]
    },
    {
      "name": "HASMKEY",
      "ord": 335,
      "Signature": "int ok=hasmkey(int msgnum);",
      "Comments": [
        "Returns if the user has the key specified in an offline Security and Accounting option",
        "1 == yes, 0 == no"
      ]
    },
    {
      "name": "HDLCHC",
      "ord": 336,
      "Signature" : "int hdlchc(int c);",
      "Comments": []
    },
    {
      "name": "HDLINP",
      "ord": 337,
      "Signature" : "void hdlinp(void);",
      "Comments": [
        "Handle simulated CD-terminated input"
      ]
    },
    {
      "name": "HDLUID",
      "ord": 338,
      "Signature": "int hdluid(char *stg);",
      "Comments": [
        "Handle the entering of a User-Id"
      ]
    },
    {
      "name": "HEXOPT",
      "ord": 339,
      "Signature": "unsigned hexopt(int msgnum,unsigned floor,unsigned ceiling);",
      "Comments": [
        "Get hex option from an MCV file"
      ]
    },
    {
      "name": "HOWBUY",
      "ord": 340,
      "Signature" : "void howbuy(void);",
      "Comments": [
        "Emit the 'how to buy credits' message"
      ]
    },
    {
      "name": "HPKROU",
      "ord": 341,
      "Signature" : "int hpkrou(int chan,char c);",
      "Comments": [
        "'Handle pause key' irp routine"
      ]
    },
    {
      "name": "HUPALL",
      "ord": 342,
      "Signature" : "void hupall(void);",
      "Comments": [
        "Hand-up on all users"
      ]
    },
    {
      "name": "IBM2ANS",
      "ord": 343,
      "Signature" : "char *ibm2ans(char attr,char *buff);",
      "Comments": []
    },
    {
      "name": "INIMSG",
      "ord": 344,
      "Signature": "void inimsg(unsigned maxsiz);",
      "Comments": [
        "Initializes the message buffer"
      ]
    },
    {
      "name": "INIPRF",
      "ord": 345,
      "Signature" : "void iniprf(char *pbuf,int pfbsiz);",
      "Comments": []
    },
    {
      "name": "INISCN",
      "ord": 346,
      "Signature" : "void iniscn(char *filnam,void *where);",
      "Comments": []
    },
    {
      "name": "INJACR",
      "ord": 347,
      "Signature": "void injacr();",
      "Comments": [
        "Injects a <CR> into the current channel"
      ]
    },
    {
      "name": "INJOTH",
      "ord": 348,
      "Signature": "int gotIt=injoth()",
      "Comments": [
        "Inject a message to another user (implicit inputs othusn, prfbuf).",
        "1 = User got it, 0 = User was busy"
      ]
    },
    {
      "name": "INPLEN",
      "ord": 349,
      "Signature": "int inplen;",
      "Comments": [
        "Total length us the user input in bytes"
      ]
    },
    {
      "name": "INPUT",
      "ord": 350,
      "Signature": "char input[];",
      "Comments": [
        "User Input lines"
      ]
    },
    {
      "name": "INSBTV",
      "ord": 351,
      "Signature": "void insbtv(char *recptr);",
      "Comments": [
        "Insert new fixed-length Btrieve record"
      ]
    },
    {
      "name": "INSTAT",
      "ord": 352,
      "Signature": "int isin=instat(char *usrid, int qstate);",
      "Comments": [
        "Determines if a user is using a specific module"
      ]
    },
    {
      "name": "INT86",
      "ord": 353,
      "Signature" : "int int86(int intr_num, union REGS *inregs, union REGS *outregs);",
      "Comments": [
        "int86  - general 8086 software interrupt interface"
      ]
    },
    {
      "name": "INT86X",
      "ord": 354,
      "Signature" : "int int86x(int intr_num, union REGS *inregs, union REGS *outregs,struct SREGS *segregs);",
      "Comments": [
        "int86x  - general 8086 software interrupt interface"
      ]
    },
    {
      "name": "INTDOS",
      "ord": 355,
      "Signature" : "int intdos(union REGS * inregs, union REGS * outregs);",
      "Comments": [
        " intdos - general MS-DOS interrupt interface"
      ]
    },
    {
      "name": "INTDOSX",
      "ord": 356,
      "Signature" : "int intdosx(union REGS *inregs, union REGS *outregs, struct SREGS *segregs);",
      "Comments": [
        "intdosx - general MS-DOS interrupt interface"
      ]
    },
    {
      "name": "INVBTV",
      "ord": 357,
      "Signature": "void invbtv(char *recptr, int length);",
      "Comments": [
        "Insert variable length Btrieve record"
      ]
    },
    {
      "name": "IOCTL",
      "ord": 358,
      "Signature" : "int ioctl(int handle, int cmd [, void *argdx, int argcx]);",
      "Comments": [
        "ioctl - controls I/O device"
      ]
    },
    {
      "name": "ISATTY",
      "ord": 359,
      "Signature" : "int isatty(int handle);",
      "Comments": [
        "isatty - checks for device type"
      ]
    },
    {
      "name": "ISFILN",
      "ord": 360,
      "Signature" : "int isfiln(int c,char *stg);",
      "Comments": []
    },
    {
      "name": "ISSELC",
      "ord": 361,
      "Signature": "int isselc(int c);",
      "Comments": [
        "Checks if the input is a valid menu-select character",
        "1 == yes, 0 == no"
      ]
    },
    {
      "name": "ISSUPC",
      "ord": 362,
      "Signature" : "int issupc(int c);",
      "Comments": [
        "Determines if char is a valid signup char"
      ]
    },
    {
      "name": "ISTXVC",
      "ord": 363,
      "Signature": "int istxvc(int c);",
      "Comments": [
        "Checks if the input is a valid text-variable character",
        "1 == yes, 0 == no"
      ]
    },
    {
      "name": "ISUIDC",
      "ord": 364,
      "Signature": "int isuidc(int c);",
      "Comments": [
        "Checks if the input is a valid user-id character",
        "1 == yes, 0 == no"
      ]
    },
    {
      "name": "ISUPLO",
      "ord": 365,
      "Signature" : "int isuplo(char *stg);",
      "Comments": [
        "Is string formatted correctly upper/lower case?"
      ]
    },
    {
      "name": "ITOA",
      "ord": 366,
      "Signature": "char *  itoa ( int value, char * str, int base );",
      "Comments": [
        "Converts an integer value to a null-terminated string using the specified base and stores the result in the array given by str"
      ]
    },
    {
      "name": "KBHIT",
      "ord": 367,
      "Signature" : "int kbhit(void);",
      "Comments": []
    },
    {
      "name": "KEYHIT",
      "ord": 368,
      "Signature" : "unsigned keyhit(unsigned scan);",
      "Comments": [
        "Process a key from the console"
      ]
    },
    {
      "name": "KEYNAM",
      "ord": 369,
      "Signature" : "int keynam(char *keyname);",
      "Comments": [
        "Validate a proposed keyname"
      ]
    },
    {
      "name": "KILCHN",
      "ord": 370,
      "Signature" : "void kilchn(int num);",
      "Comments": [
        "Kill a channel by channel number"
      ]
    },
    {
      "name": "KILCTR",
      "ord": 371,
      "Signature" : "int kilctr;",
      "Comments": [
        "Number of minutes to shutdown"
      ]
    },
    {
      "name": "KILETC",
      "ord": 372,
      "Signature" : " void kiletc(char *legend);",
      "Comments": []
    },
    {
      "name": "KILIPG",
      "ord": 373,
      "Signature": "int killpg;",
      "Comments": [
        "Kill-system command in progress"
      ]
    },
    {
      "name": "KILOOP",
      "ord": 374,
      "Signature" : "void kiloop(void);",
      "Comments": [
        "Kill-system loop once per minute"
      ]
    },
    {
      "name": "KILSRC",
      "ord": 375,
      "Signature" : "int kilsrc;",
      "Comments": [
        "Kill-command source (-1 == Console, -2 == MCU)"
      ]
    },
    {
      "name": "KILUID",
      "ord": 376,
      "Signature" : "int kiluid(char *userid);",
      "Comments": [
        "'Kill' the User-ID just by setting flag"
      ]
    },
    {
      "name": "L2AS",
      "ord": 377,
      "Signature": "char *l2as(long longin);",
      "Comments": [
        "Converts a long to an ASCII string"
      ]
    },
    {
      "name": "LASAHDL",
      "ord": 378,
      "Signature" : "int lasahdl;",
      "Comments": [
        "Handle before last scn2aux();"
      ]
    },
    {
      "name": "LASCAN",
      "ord": 379,
      "Signature" : "int lascan(void);",
      "Comments": []
    },
    {
      "name": "LASMHDL",
      "ord": 380,
      "Signature" : "int lasmhdl;", 
      "Comments": [
        "Handle before last scn2mai();"
      ]
    },
    {
      "name": "LASTWD",
      "ord": 381,
      "Signature": "char *lastwd(char *string);",
      "Comments": [
        "Get the last word of a string"
      ]
    },
    {
      "name": "LBLHUE",
      "ord": 382,
      "Signature" : "int lblhue;",
      "Comments": [
        "Soft-key labels display attribute code"
      ]
    },
    {
      "name": "LDEDCRD",
      "ord": 383,
      "Signature": "int enuf=ldedcrd(struct useracc *uptr, long amount, int real, int asmuch);",
      "Comments": [
        "Deduct credits from an 'active' user account structure residing in memory",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "LINCST",
      "ord": 384,
      "Signature" : "long lincst(int unum);",
      "Comments": [
        "Find cost of using x/25 line for 15 seconds"
      ]
    },
    {
      "name": "LINSUSD",
      "ord": 385,
      "Signature" : "int linsusd(void);",
      "Comments": [
        "Return the number of lines in use"
      ]
    },
    {
      "name": "LISTING",
      "ord": 386,
      "Signature" : "void listing(char *path, void (*whndun)())",
      "Comments": [
        "List an ASCII file to the users's screen"
      ]
    },
    {
      "name": "LIVEPH",
      "ord": 387,
      "Signature": "char *liveph;",
      "Comments": [
        "The first phone lie reserved for live users"
      ]
    },
    {
      "name": "LLNBTV",
      "ord": 388,
      "Signature": "int llnbtv (void);",
      "Comments": [
        "Find the record length of the most recently read record"
      ]
    },
    {
      "name": "LNGOPT",
      "ord": 389,
      "Signature": "long lngopt(int msgnum,long floor,long ceiling);",
      "SignatureFormat": "long lngopt({0},{1},{2});",
      "Comments": [
        "Gets a large numeric option from the MCV File"
      ],
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "int",
          "Name": "Message Number"
        },
        {
          "Offset": -2,
          "Op": "PUSH",
          "Type": "longl",
          "Name": "Floor (Low Byte)"
        },
        {
          "Offset": -3,
          "Op": "PUSH",
          "Type": "longh",
          "Name": "Floor (High Byte)"
        },
        {
          "Offset": -4,
          "Op": "PUSH",
          "Type": "longl",
          "Name": "Ceiling (Low Byte)"
        },
        {
          "Offset": -5,
          "Op": "PUSH",
          "Type": "longh",
          "Name": "Ceiling (High Byte)"
        }
      ]
    },
    {
      "name": "LNGRND",
      "ord": 390,
      "Signature" : "long lngrnd(long min,long max);",
      "Comments": [
        "Generate a long random number"
      ]
    },
    {
      "name": "LOADKEYS",
      "ord": 391,
      "Signature" : "void loadkeys(char *keyring);",
      "Comments": [
        "Load a users keys into memory "
      ]
    },
    {
      "name": "LOCATE",
      "ord": 392,
      "Signature": "void locate(int x, int y);",
      "Comments": [
        "Move cursor to specified X,Y"
      ]
    },
    {
      "name": "LONGJMP",
      "ord": 393,
      "Signature" : "void longjmp(jmp_buf jmpb, int retval);",
      "Comments": [
        "longjmp - performs a nonlocal goto"
      ]
    },
    {
      "name": "LONSTF",
      "ord": 394,
      "Signature": "int lonstf()",
      "Comments": [
        "Supplemental log-on 'stuff'"
      ]
    },
    {
      "name": "LOSCAR",
      "ord": 395,
      "Signature" : "void loscar(void);",
      "Comments": [
        "Lost carrier 'hang out' routine"
      ]
    },
    {
      "name": "LSEEK",
      "ord": 396,
      "Signature" : "long lseek(int handle, long ofs, int fromwhere);",
      "Comments": [
        "lseek - moves read/write file pointer"
      ]
    },
    {
      "name": "LTOA",
      "ord": 397,
      "Signature" : "char *ltoa(long value, char *strP, int radix);",
      "Comments": [
        "ltoa  - converts a long to a string"
      ]
    },
    {
      "name": "MAINHDL",
      "ord": 398,
      "Signature" : "int mainhdl;",
      "Comments": [
        "Handle of screen on main (0=none)"
      ]
    },
    {
      "name": "MAKHDL",
      "ord": 399,
      "Signature": "void makhdl(char *stg);",
      "Comments": [
        "'Make Handle' for use with Btrieve"
      ]
    },
    {
      "name": "GALMALLOC",
      "ord": 400,
      "Signature" : "void * galmalloc(unsigned int size);",
      "Comments": [
        "Galacticomm's malloc() for debugging"
      ]
    },
    {
      "name": "MARGC",
      "ord": 401,
      "Signature": "int margc;",
      "Comments": [
        "Number of words in the user input line",
        "Value initalized by parsin()"
      ]
    },
    {
      "name": "MARGN",
      "ord": 402,
      "Signature": "char *margn[];",
      "Comments": [
        "An Array of pointers to the ENDS of the words in the user's input line",
        "Value initalized by parsin()"
      ]
    },
    {
      "name": "MARGV",
      "ord": 403,
      "Signature": "char *margv[];",
      "Comments": [
        "An array of pointers to the words in user's input line",
        "Value initalized by parsin()"
      ]
    },
    {
      "name": "MAXTAGS",
      "ord": 404,
      "Signature" : "int maxtags;",
      "Comments": [
        "Maximum number of tagged files per user"
      ]
    },
    {
      "name": "MDFGETS",
      "ord": 405,
      "Signature": "char *mdfgets(char *buf,int size,FILE *fp);",
      "Comments": [
        "Read a line of text from a file"
      ]
    },
    {
      "name": "MDSTATS",
      "ord": 406,
      "Signature" : "struct mdstats *mdstats;",
      "Comments": [
        "In-memory array of module statistics"
      ]
    },
    {
      "name": "MEMCATA",
      "ord": 407,
      "Signature" : "void memcata(void);",
      "Comments": []
    },
    {
      "name": "MEMCMP",
      "ord": 408,
      "Signature": "int memcmp ( const void * ptr1, const void * ptr2, size_t num );",
      "Comments": [
        "Compares the first num bytes of the block of memory pointed by ptr1 to the first num bytes pointed by ptr2, returning zero if they all match or a value different from zero representing which is greater if they do not."
      ]
    },
    {
      "name": "MEMCPY",
      "ord": 409,
      "Signature": "void* memcpy (void* destination, const void* source,size_t num );",
      "Comments": [
        "Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination."
      ]
    },
    {
      "name": "MEMMOVE",
      "ord": 410,
      "Signature" : "void memmove(void *dst, const void *scr, unsigned len);",
      "Comments": [
        "memmove - move a block of bytes"
      ]
    },
    {
      "name": "MEMSET",
      "ord": 411,
      "Signature": "void memset(void *ptr, int value, size_t num);",
      "Comments": [
        "Sets the first num bytes of the block of memory with the specified value"
      ]
    },
    {
      "name": "MJRMB",
      "ord": 412,
      "Signature": "FILE *mjrmb;",
      "Comments": [
        "Executive named-message file block prt"
      ]
    },
    {
      "name": "MKDIR",
      "ord": 413,
      "Signature" : "int mkdir(const char *pathname);",
      "Comments": [
        "mkdir - creates a directory"
      ]
    },
    {
      "name": "MMUCRR",
      "ord": 414,
      "Signature": "int mmucrr;",
      "Comments": [
        "Main menu credit consumption rate per minute"
      ]
    },
    {
      "name": "MNUBB",
      "ord": 415,
      "Signature" : "BTVFILE *mnubb;",
      "Comments": [
        "Menu information Btrieve file pointer"
      ]
    },
    {
      "name": "MNUOFF",
      "ord": 416,
      "Signature": "struct usrmnu *mnuoff(int unum);",
      "Comments": [
        "Returns the pointer of the User's menu info"
      ]
    },
    {
      "name": "MODULE",
      "ord": 417,
      "Signature": "struct module{...} **module;",
      "Comments": [
        "Module Interface Block that contains method references for system events (logoff supplemental, login supplemental, etc.)"
      ]
    },
    {
      "name": "MONORCOL",
      "ord": 418,
      "Signature" : "void monorcol(void);",
      "Comments": []
    },
    {
      "name": "MORCNC",
      "ord": 419,
      "Signature": "char morcnc(void);",
      "Comments": [
        "Checks to see if there's any more command to parse",
        "NULL if none "
      ]
    },
    {
      "name": "MOVMEM",
      "ord": 420,
      "Signature": "void movmem(char *source, char *destination, unsigned nbytes);",
      "Comments": [
        "Move a block of memory",
        "Translates in .H file to either memmove(d,s,n) or memcpy(d,s,n) depending on MS version"
      ]
    },
    {
      "name": "MSGSCAN",
      "ord": 421,
      "Signature": "char *msgscan(char *msgfile,char *vblname);",
      "SignatureFormat": "char *msgscan({0},{1});",
      "Comments": [
        "Read a CNF option from a .MSG file"
      ],
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "string",
          "Name": "MSG File"
        },
        {
          "Offset": -3,
          "Op": "PUSH",
          "Type": "string",
          "Name": "Variable Name"
        }
      ]
    },
    {
      "name": "MSGSEEK",
      "ord": 422,
      "Signature" : "unsigned msgseek(int msgnum);",
      "Comments": []
    },
    {
      "name": "MTGBAS",
      "ord": 424,
      "Signature" : "int mtgbas(int base,long min,long max);",
      "Comments": [
        "Get long integer using CNC (w/ base)"
      ]
    },
    {
      "name": "MTGCHN",
      "ord": 425,
      "Signature" : "int mtgchn(int min,int max);",
      "Comments": [
        "Get channel number using CNC"
      ]
    },
    {
      "name": "MTGSTG",
      "ord": 426,
      "Signature" : "int mtgstg(int mulwrd,int maxlen);",
      "Comments": [
        "Get character string using CNC"
      ]
    },
    {
      "name": "NAMACLS",
      "ord": 427,
      "Signature" : "int namacls(char *clsname);",
      "Comments": [
        "Check a proposed new class name"
      ]
    },
    {
      "name": "NCDATE",
      "ord": 428,
      "Signature": "char *ascdat=ncdate(int date);",
      "Comments": [
        "Encode date into 'MM/DD/YY' format"
      ]
    },
    {
      "name": "NCEDAT",
      "ord": 429,
      "Signature": "char *ascdat(int date);",
      "Comments": [
        "Converts date from int format YYYYYYYMMMMDDDDD to 'DD-MMM-YY'"
      ]
    },
    {
      "name": "NCTIME",
      "ord": 430,
      "Signature": "char *asctim=nctime(int time);",
      "Comments": [
        "Encode the time into 'HH:MM:SS'",
        "Input is int returned from time()"
      ]
    },
    {
      "name": "NDEDCRD",
      "ord": 431,
      "Signature": "int enuf=ndedcrd(char *userid, long amount, int real, int asmuch);",
      "Comments": [
        "Deduct credits from an offline account"
      ]
    },
    {
      "name": "NKYREC",
      "ord": 432,
      "Signature" : "void nkyrec(char *uid);",
      "Comments": [
        "Creates a new key record"
      ]
    },
    {
      "name": "NLINIU",
      "ord": 433,
      "Signature" : "int nliniu(void);",
      "Comments": [
        "Returns number of system lines 'in use'"
      ]
    },
    {
      "name": "NMODS",
      "ord": 434,
      "Signature": "int nmods;",
      "Comments": [
        "Number of modules currently online"
      ]
    },
    {
      "name": "NOW",
      "ord": 435,
      "Signature": "int time=now()",
      "Comments": [
        "Returns the time of day it is bitwise HHHHHMMMMMMSSSSS coding",
        "HHHHH * 2048 representing 0 through 23",
        "MMMMMM * 32 representing 0 through 59",
        "SSSSS representing the even numbers 0 though 58",
        "Use nctime() to parse"
      ]
    },
    {
      "name": "NSEXPLOTO",
      "ord": 436,
      "Signature" : "void nsexploto(char *sptr,int fux,int fuy,int flx,int fly,int tux,int tuy);",
      "Comments": []
    },
    {
      "name": "NTERMS",
      "ord": 437,
      "Signature": "int nterms;",
      "Comments": [
        "Total number of channels defined"
      ]
    },
    {
      "name": "NTFYSOPR",
      "ord": 438,
      "Signature" : "void (*ntfysopr)(char *audrec);",
      "Comments": [
        "Notify Remote Sysop Routine"
      ]
    },
    {
      "name": "NUMBYTS",
      "ord": 439,
      "Signature" : "long numbyts;",
      "Comments": [
        "Global variable output by cntdir() and cntdirs()"
      ]
    },
    {
      "name": "NUMFILS",
      "ord": 440,
      "Signature" : "long numfils;",
      "Comments": [
        "Global variable output by cntdir() and cntdirs()"
      ]
    },
    {
      "name": "NUMOPT",
      "ord": 441,
      "Signature": "int numopt(int msgnum,int floor,int ceiling);",
      "Comments": [
        "Retrieves a numeric option from MCV file"
      ],
      "SignatureFormat": "numopt({0}, {1}, {2})",
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "int",
          "Operand": 0,
          "Name": "Message Number"
        },
        {
          "Offset": -2,
          "Op": "PUSH",
          "Type": "int",
          "Operand": 0,
          "Name": "Floor"
        },
        {
          "Offset": -3,
          "Op": "PUSH",
          "Type": "int",
          "Operand": 0,
          "Name": "Ceiling"
        }
      ],
      "ReturnValues": [
        {
          "Offset": 2,
          "Op": "MOV",
          "Type": "int",
          "Name": "Loaded Variable"
        }
      ]
    },
    {
      "name": "NXTCMD",
      "ord": 442,
      "Signature": "char *nxtcmd;",
      "Comments": [
        "The global variable 'nxtcmd' in CNCUTL.C keeps track of what has already been interpreted from the user's command - it points to the rest of the command."
      ]
    },
    {
      "name": "NXTLOF",
      "ord": 443,
      "Signature" : "void nxtlof(void);",
      "Comments": [
        "Look for next logoff sup routine"
      ]
    },
    {
      "name": "OBTBTV",
      "ord": 444,
      "Signature": "int obtbtv(char *recptr, char* key, int keynum, int obtopt);",
      "Comments": [
        "Acquire a record (if you can) from Btrieve"
      ]
    },
    {
      "name": "ODD",
      "ord": 445,
      "Signature": "int odd(char byt);",
      "Comments": [
        "Compute odd parity of the input"
      ]
    },
    {
      "name": "ODEDCRD",
      "ord": 446,
      "Signature": "int enuf=odedcrd(int unum, long amount, int real, int asmuch);",
      "Comments": [
        "Deduct credits from an online account"
      ]
    },
    {
      "name": "OMDBTV",
      "ord": 447,
      "Signature" : "void omdbtv (int mode);",
      "Comments": [
        "Set opnbtv() file-open mode"
      ]
    },
    {
      "name": "ONBBS",
      "ord": 448,
      "Signature": "int onbbs(char *uid, int invisb);",
      "Comments": [
        "Is a userid ANYWHERE on the BBS? (even logging in)",
        "0 == use INVISB flag in decision",
        "1 == ignore INVISB flag"
      ]
    },
    {
      "name": "ONSYS",
      "ord": 449,
      "Signature": "int ison=onsys(char *usrid);",
      "Comments": [
        "Determines if a user is online",
        "1 == user is online & logged in"
      ]
    },
    {
      "name": "ONSYSN",
      "ord": 450,
      "Signature": "int onsysn(char *uid,int invis);",
      "Comments": [
        "Checks uid to see if they're on the system"
      ]
    },
    {
      "name": "OPEN",
      "ord": 451,
      "Signature" : "int opfile(char *filnam);",
      "Comments": [
        "Initiate ASCII download of a text file"
      ]
    },
    {
      "name": "OPFILE",
      "ord": 452,
      "Signature" : "int opfile(char *filnam);",
      "Comments": []
    },
    {
      "name": "OPINF",
      "ord": 453,
      "Signature" : "struct otrail opinf;",
      "Comments": [
        "Trail structure for backspace key"
      ]
    },
    {
      "name": "OPNANS",
      "ord": 454,
      "Signature" : "int opnans(char *filnam);",
      "Comments": [
        "Open file w/ .ext based on lang/prot"
      ]
    },
    {
      "name": "OPNBTV",
      "ord": 455,
      "Signature": "BTVFILE *bbptr=opnbtv(char *filnae, int reclen);",
      "Comments": [
        "Opens a Btrieve file for I/O"
      ]
    },
    {
      "name": "OPNMSG",
      "ord": 456,
      "Signature": "FILE *mbkprt=opnmsg(char *fileName)",
      "Comments": [
        "Opens the specified CNF file (.MCV in runtime form)",
        "Prior PUSH contains file name reference"
      ]
    },
    {
      "name": "OTHKEY",
      "ord": 457,
      "Signature" : "int othkey(char *lock);",
      "Comments": [
        "Does other user have the key to this lock?"
      ]
    },
    {
      "name": "OTHUAP",
      "ord": 458,
      "Signature": "struct usracc *othuaP;",
      "Comments": [
        "Pointer to structure for that user in the 'usracc' structure (set by onsys() or instat())"
      ]
    },
    {
      "name": "OTHUSN",
      "ord": 459,
      "Signature": "int othusn;",
      "Comments": [
        "User Number of the other user (set by onsys() or instat())"
      ]
    },
    {
      "name": "OTHUSP",
      "ord": 460,
      "Signature": "struct user *othusp;",
      "Comments": [
        "Pointer to structure for that user in the user[] array (set by onsys() or instat())"
      ]
    },
    {
      "name": "OTSTCRD",
      "ord": 461,
      "Signature": "int enuf=otstcrd(int unum, long amount, int real);",
      "Comments": [
        "Test if the user has enough credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "OUTBSZ",
      "ord": 462,
      "Signature": "int outbsz;",
      "Comments": [
        "Output buffer size per channel"
      ]
    },
    {
      "name": "OUTPRF",
      "ord": 463,
      "Signature": "outprf (unum);",
      "Comments": [
        "Send prfbuf to a channel & clear"
      ]
    },
    {
      "name": "PACCIN",
      "ord": 464,
      "Signature" : "void paccin(void);",
      "Comments": [
        "Get user input and do initial processing"
      ]
    },
    {
      "name": "PACCIT",
      "ord": 465,
      "Signature" : "void paccit(void);",
      "Comments": [
        "Show input on modem monitor, check profanity"
      ]
    },
    {
      "name": "PADFLD",
      "ord": 466,
      "Signature" : "void padfld(char *stg,int len);",
      "Comments": []
    },
    {
      "name": "PARSIN",
      "ord": 467,
      "Signature": "void parsin();",
      "Comments": [
        "Parses the input line (null terminating each word)"
      ]
    },
    {
      "name": "PFNLVL",
      "ord": 468,
      "Signature": "int pfnlvl;",
      "Comments": [
        "'Profanity Level' of the Input (from configuration)"
      ]
    },
    {
      "name": "PLTILE",
      "ord": 469,
      "Signature" : "int pltile(unsigned long size,int bsel,unsigned stride,unsigned tsize);",
      "Comments": [
        "Allocate Phar Lap tiled region"
      ]
    },
    {
      "name": "POWPRF",
      "ord": 470,
      "Signature" : "void powprf(void);",
      "Comments": [
        "'Power' outprf() -- cut through input"
      ]
    },
    {
      "name": "PRAT",
      "ord": 471,
      "Signature" : "void prat();",
      "Comments": []
    },
    {
      "name": "PRCRTK",
      "ord": 472,
      "Signature" : "void prcrtk(void);",
      "Comments": []
    },
    {
      "name": "PREPFF",
      "ord": 473,
      "Signature" : "void prepff(void);",
      "Comments": [
        "Prepares vacant chans for further 'stuff'"
      ]
    },
    {
      "name": "PRF",
      "ord": 474,
      "Signature": "prf(string); ",
      "Comments": [
        "Like printf(), except the converted text goes into a buffer"
      ]
    },
    {
      "name": "PRFBUF",
      "ord": 475,
      "Signature": "char *prfbuf;",
      "Comments": [
        "Output buffer of prd() and prdmsg()"
      ]
    },
    {
      "name": "PRFMSG",
      "ord": 476,
      "Signature": "prfmsg(msgnum,p1,p2, ..• ,pn);",
      "Comments": [
        "Like prf(), but the control string comes from an .MCV file",
        "Preceding PUSH holds the Message # from the .MCV file"
      ]
    },
    {
      "name": "PRFPTR",
      "ord": 477,
      "Signature": "char *prfptr;",
      "Comments": [
        "Pointer to the current position in prfbuf"
      ]
    },
    {
      "name": "PRFSPD",
      "ord": 478,
      "Signature" : "void prfspd(int delay);",
      "Comments": []
    },
    {
      "name": "PRINTFAT",
      "ord": 479,
      "Signature" : "void printfat();",
      "Comments": []
    },
    {
      "name": "PROFAN",
      "ord": 480,
      "Signature" : "int profan(char *string);", 
      "Comments": [
        "Determines the profanity level of a string"
      ]
    },
    {
      "name": "PROFF",
      "ord": 481,
      "Signature" : "void proff(int x,int y);",
      "Comments": []
    },
    {
      "name": "PSMATM",
      "ord": 482,
      "Signature" : "void psmatm(void);",
      "Comments": [
        "Send Sysop page to main console (old form)"
      ]
    },
    {
      "name": "PUTENV",
      "ord": 483,
      "Signature" : "int putenv(const char *envvar);",
      "Comments": [
        "putenv - adds string to current environment"
      ]
    },
    {
      "name": "QNPBTV",
      "ord": 484,
      "Signature": "int qnpbtv (int getopt);",
      "Comments": [
        "Query Next/Previous Btrieve utility"
      ]
    },
    {
      "name": "QRYBTV",
      "ord": 485,
      "Signature": "int is=qrybtv(char *key, int keynum, int qryopt);",
      "Comments": [
        "Query whether a record exists",
        "1 == exists, 0 == doesn't exist"
      ]
    },
    {
      "name": "RAND",
      "ord": 486,
      "Signature": "int rand (void);",
      "Comments": [
        "Returns a pseudo-random integral number in the range between 0 and RAND_MAX."
      ]
    },
    {
      "name": "RAWMSG",
      "ord": 487,
      "Signature": "char *bufadr=rawmsg(int msgnum);",
      "Comments": [
        "Read value of CNF option"
      ]
    },
    {
      "name": "RDEDCRD",
      "ord": 488,
      "Signature": "int enuf=dedcrd(long amount, int asmuch);",
      "Comments": [
        "Deduct real credits from online acct",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "RDFILE",
      "ord": 489,
      "Signature" : "int rdfile(void);",
      "Comments": [
        "On-going file reading process"
      ]
    },
    {
      "name": "REALLOC",
      "ord": 490,
      "Signature" : "void* realloc (void* ptr, size_t size);",
      "Comments": [
        "Changes the size of the memory block pointed to by ptr."
      ]
    },
    {
      "name": "REDOLOCKS",
      "ord": 491,
      "Signature" : "void redolocks(inserted);",
      "Comments": [
        "Redo the in-memory Lock #'s for Users"
      ]
    },
    {
      "name": "REGISTER_MODULE",
      "ord": 492,
      "Signature": "int register_module(struct module *mod);",
      "Comments": [
        "Registers the Module with the MajorBBS system"
      ],
      "ReturnValues": [
        {
          "Offset": 2,
          "Op": "MOV",
          "Type": "int",
          "Name": "statecode",
          "Comment": "Value of usrptr->state whenever user will in 'in' this module"
        }
      ]
    },
    {
      "name": "REGISTER_STASCN",
      "ord": 493,
      "Signature" : "void register_stascn(struct statsc *stascn);",
      "Comments": [
        "Registers a Statistic Screen"
      ]
    },
    {
      "name": "REGISTER_TEXTVAR",
      "ord": 494,
      "Signature": "int register_textvar(char *name,char *(*varrou)());",
      "Comments": [
        "Registers a Text Variable for use"
      ]
    },
    {
      "name": "REGSCN",
      "ord": 495,
      "Signature" : "int regscn(struct scrnid *newscn);",
      "Comments": [
        "Register a screen for display"
      ]
    },
    {
      "name": "RENAME",
      "ord": 496,
      "Signature": "int rename(const char *oldname, const char *newname );",
      "Comments": [
        "Changes the name of the file or directory specified by oldname to newname"
      ]
    },
    {
      "name": "REPMEM",
      "ord": 497,
      "Signature": "void repmem(void *destination, char *pattern, int nbyt);",
      "Comments": [
        "Replicate a pattern in memory"
      ]
    },
    {
      "name": "REWIND",
      "ord": 498,
      "Signature" : "void rewind (FILE *fp);",
      "Comments": [
        "rewind - repositions a stream"
      ]
    },
    {
      "name": "RMDIR",
      "ord": 499,
      "Signature" : "int rmdir(const char *pathname);",
      "Comments": [
        "rmdir - removes directory"
      ]
    },
    {
      "name": "RMVKEY",
      "ord": 500,
      "Signature" : "void rmvkey(char *uid,char *keylist);",
      "Comments": [
        "Removed a list of keys from the specified user"
      ]
    },
    {
      "name": "RMVWHT",
      "ord": 501,
      "Signature": "void rmvwht(char *string);",
      "Comments": [
        "Remove all whitespace characters"
      ]
    },
    {
      "name": "RSETOP",
      "ord": 502,
      "Signature" : "int rsetop;",
      "Comments": [
        "Reset option, Busy == B, No-Answer == N"
      ]
    },
    {
      "name": "RSMODE",
      "ord": 503,
      "Signature": "int rsmode;",
      "Comments": [
        "Reset-mode code for channels"
      ]
    },
    {
      "name": "RSMODES",
      "ord": 504,
      "Signature": "int *rsmodes;",
      "Comments": [
        "Reset-mode array by channel number"
      ]
    },
    {
      "name": "RSTBTV",
      "ord": 505,
      "Signature": "void rstbtv (void);",
      "Comments": [
        "Restores the last Btrieve data block for use"
      ]
    },
    {
      "name": "RSTCHN",
      "ord": 506,
      "Signature": "void rstchn();",
      "Comments": [
        "Completely reset a modem channel"
      ]
    },
    {
      "name": "RSTCUR",
      "ord": 507,
      "Signature" : "void rstcur(void);",
      "Comments": []
    },
    {
      "name": "RSTLAN",
      "ord": 508,
      "Signature" : "void rstlan(int ishard);",
      "Comments": [
        "Reset related LAN activity"
      ]
    },
    {
      "name": "RSTLOC",
      "ord": 509,
      "Signature" : "void rstloc(void);",
      "Comments": []
    },
    {
      "name": "RSTMBK",
      "ord": 510,
      "Signature": "rstmbk();",
      "Comments": [
        "Restore previous MCV file block ptr from before last setmbk() call"
      ]
    },
    {
      "name": "RSTRIN",
      "ord": 511,
      "Signature": "void rstrin();",
      "Comments": [
        "Restore parsed input line (under effects of parsin()"
      ]
    },
    {
      "name": "RSTRXF",
      "ord": 512,
      "Signature": "void rstrxf();",
      "Comments": [
        "Restores screen-length to usracc setting"
      ]
    },
    {
      "name": "RSTWIN",
      "ord": 513,
      "Signature" : "void rstwin(void);",
      "Comments": []
    },
    {
      "name": "RSTX25",
      "ord": 514,
      "Signature" : "void rstx25(char *dspstg,char dspc);",
      "Comments": [
        "Reset related X.25 activity"
      ]
    },
    {
      "name": "RTIHDLR",
      "ord": 515,
      "Signature": "rtihdlr(void (*rouptr)(void));",
      "Comments": [
        "Register a real-time routine which requires it be executed more than once per second",
        "Executes at 18hz"
      ]
    },
    {
      "name": "RTKICK",
      "ord": 516,
      "Signature": "rtkick(int time, void *rouptr());",
      "Comments": [
        "'Kick Off' routine after time delay"
      ]
    },
    {
      "name": "RTSTCRD",
      "ord": 517,
      "Signature": "int enuf=rtstcrd(long amount);",
      "Comments": [
        "Test if the user has enough real credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "SAFPSW",
      "ord": 519,
      "Signature" : "ing safpsw;",
      "Comments": [
        "Can user-id or password be 'password'"
      ]
    },
    {
      "name": "SAMEAS",
      "ord": 520,
      "Signature": "int match=sameas(char *stgl, char* stg2);",
      "Comments": [
        "Case-ignoring string match",
        "Returns 1 if match, 0 otherwise"
      ]
    },
    {
      "name": "SAMEIN",
      "ord": 521,
      "Signature": "int found=samein(char *subs, char *string);",
      "Comments": [
        "Searches the string for any accurance of the substring",
        "Returns 1 if it finds any"
      ]
    },
    {
      "name": "SAMETO",
      "ord": 522,
      "Signature": "int match=sameto(char *shorts, char *longs);",
      "Comments": [
        "Case-ignoring substring match"
      ]
    },
    {
      "name": "SAMPOK",
      "ord": 524,
      "Signature" : "int sampok(void);",
      "Comments": [
        "Determines if the line is a free sample or not"
      ]
    },
    {
      "name": "SAYCRD",
      "ord": 525,
      "Signature" : "int saycrd(char *tckstg,int real);",
      "Comments": [
        "Notify creditee (if online) of credits"
      ]
    },
    {
      "name": "SCBLANK",
      "ord": 526,
      "Signature" : "char *scblank(char *buf,int attrib);",
      "Comments": []
    },
    {
      "name": "SCN2AUX",
      "ord": 527,
      "Signature" : "void scn2aux(int scnhdl);",
      "Comments": [
        "Make screen visible on AUX CRT"
      ]
    },
    {
      "name": "SCN2MAI",
      "ord": 528,
      "Signature" : "void scn2mai(int scnhdl);",
      "Comments": [
        "Make screen visible on CRT"
      ]
    },
    {
      "name": "SCNCOLOR",
      "ord": 529,
      "Signature" : "int scncolor(int attrib);",
      "Comments": []
    },
    {
      "name": "SCNGOAWAY",
      "ord": 530,
      "Signature" : "void scngoaway(int scnhdl);",
      "Comments": [
        "Screen wants to hide itself"
      ]
    },
    {
      "name": "SCNIDS",
      "ord": 531,
      "Signature" : "struct scrnid *scnids",
      "Comments": []
    },
    {
      "name": "SEGREAD",
      "ord": 532,
      "Comments": []
    },
    {
      "name": "SELNUM",
      "ord": 533,
      "Signature" : "int selnum(char selchr);",
      "Comments": [
        "Gets selection number from a char"
      ]
    },
    {
      "name": "SETBTV",
      "ord": 534,
      "Signature": "void setbtv(BTVFILE *bbprt);",
      "Comments": [
        "Used to set the Btrieve file for all subsequent database functions"
      ]
    },
    {
      "name": "SETCNF",
      "ord": 535,
      "Signature" : "void setcnf(char *optnam,char *optval);",
      "Comments": []
    },
    {
      "name": "SETCRIT",
      "ord": 536,
      "Signature": "void setcrit();",
      "Comments": [
        "Sets the DOS critical error handler to a routine that pops up a window"
      ]
    },
    {
      "name": "SETDATE",
      "ord": 537,
      "Signature" : "void setdate(struct date *dateblk);",
      "Comments": [
        "setdate - sets MS-DOS date"
      ]
    },
    {
      "name": "SETDTD",
      "ord": 538,
      "Signature": "int ok=setdtd(char *fname, int time, int date);",
      "Comments": [
        "Sets the date and time on a file"
      ]
    },
    {
      "name": "SETFSD",
      "ord": 539,
      "Signature" : "void setfsd(int chan)",
      "Comments": [
        "Set fsd context, acc to channel 0..nterms-1"
      ]
    },
    {
      "name": "SETFTU",
      "ord": 540,
      "Signature" : "void setftu(void);",
      "Comments": [
        "Sets up lots of globals for File Transfer"
      ]
    },
    {
      "name": "SETJMP",
      "ord": 541,
      "Signature" : "int setjmp(jmp_buf jmpb);",
      "Comments": [
        "setjmp - nonlocal goto"
      ]
    },
    {
      "name": "SETKEY",
      "ord": 542,
      "Signature" : "void setkey(char *lock);",
      "Comments": [
        "Turn current user's bit on for this key"
      ]
    },
    {
      "name": "SETMBK",
      "ord": 543,
      "Signature": "FILE *setmbk(mbkptr);",
      "Comments": [
        "Sets the 'current' MCV file block pointer"
      ]
    },
    {
      "name": "SETMEM",
      "ord": 544,
      "Signature": "void setmem(char *destination, unsigned nbytes, char value);",
      "Comments": [
        "Set a block of memory to a value"
      ]
    },
    {
      "name": "SETTIME",
      "ord": 545,
      "Signature" : "int _setTime(LCID locale, LPWIN32TIME Time)",
      "Comments": [
        "_setTime - set the time type"
      ]
    },
    {
      "name": "SETTND",
      "ord": 546,
      "Signature": "int ok=settnd(char *fname, long gmt70);",
      "Comments": [
        "Sets the date and time for a file"
      ]
    },
    {
      "name": "SETVBUF",
      "ord": 547,
      "Signature": "int setvbuf(FILE *stream, char *buf, int type, size_t size);",
      "Comments": [
        "setbuf - assigns buffering to a stream",
        "In setvbuf, if buf is NULL, a buffer will be allocated using malloc; the buffer will use size as the amount allocated. The size parameter specifies the buffer size and must be greater than zero."
      ]
    },
    {
      "name": "SETWIN",
      "ord": 548,
      "Signature" : "void setwin(void *scn,int xul,int yul,int xlr,int ylr,int sen);",
      "Comments": []
    },
    {
      "name": "SHOCHL",
      "ord": 549,
      "Signature": "void shochl(char *legend,char sing,int attr);",
      "Comments": [
        "Show legend for channel with any attribute"
      ]
    },
    {
      "name": "SHOCST",
      "ord": 550,
      "Signature": "void shocst(char *summary, char *detail, p1, p1,...,pn);",
      "Comments": [
        "Displays a message in the Audit Trail",
        "(summary max length = 32, detail max length = 64)"
      ]
    },
    {
      "name": "SHWCRD",
      "ord": 551,
      "Signature" : "int shwcrd;",
      "Comments": [
        "Show credits to people online", "1 == show, 0 == hide"
      ]
    },
    {
      "name": "SHWUSR",
      "ord": 552,
      "Signature" : "void shwusr(struct usracc *usaptr);",
      "Comments": [
        "Shows a users account info"
      ]
    },
    {
      "name": "SKPWHT",
      "ord": 553,
      "Signature": "char *skpwht(char *string);",
      "Comments": [
        "Skip past whitespace, returns pointer to the first NULL or non-whitespace character in the string"
      ]
    },
    {
      "name": "SKPWRD",
      "ord": 554,
      "Signature": "char *skpwrd(char *cp);",
      "Comments": [
        "Skip past non-white spaces, returns first NULL or whitespace character in the string"
      ]
    },
    {
      "name": "SND2AL",
      "ord": 555,
      "Signature" : "void snd2al(char *text);",
      "Comments": [
        "Sends text to all online channels"
      ]
    },
    {
      "name": "SND2CH",
      "ord": 556,
      "Signature": "void snd2ch(int chan,char *text);",
      "Comments": [
        "Sends text to the specified channel"
      ]
    },
    {
      "name": "SOPEN",
      "ord": 557,
      "Signature" : "int sopen(const char *pathname, int access, int shflag[, unsigned permiss] );",
      "Comments": [
        "sopen - opens a file for file sharing"
      ]
    },
    {
      "name": "SORTSTGS",
      "ord": 558,
      "Signature": "void sortstgs(char *stgs[],int num);",
      "Comments": [
        "Sorts a bunch of strings by re-arranging an array of pointers"
      ]
    },
    {
      "name": "SPR",
      "ord": 559,
      "Signature": "char *sprstg=spr(char *ctlstg, TYPE p1, TYPE p2,...,pn);",
      "Comments": [
        "sprintf-like string formatter utility",
        "Main differentiator is that spr() supports long integer and floating point conversions",
        "Return Registers: AX - pointer, DX - length"
      ]
    },
    {
      "name": "SPRINTF",
      "ord": 560,
      "Signature": "int sprintf(char *str, const char *format, ... );",
      "Comments": [
        "sprintf() function in C++ to handle string formatting"
      ]
    },
    {
      "name": "SRAND",
      "ord": 561,
      "Signature": "void srand (unsigned int seed);",
      "Comments": [
        "The pseudo-random number generator is initialized using the argument passed as seed."
      ]
    },
    {
      "name": "SSCANF",
      "ord": 562,
      "Signature": "int sscanf(const char *s, const char *format, ...);",
      "Comments": [
        "Reads data from s and stores them accounting to parameter format into the locations given by the additional arguments"
      ]
    },
    {
      "name": "SSTATR",
      "ord": 563,
      "Signature" : "void sstatr(int attrib);",
      "Comments": []
    },
    {
      "name": "STANSI",
      "ord": 564,
      "Signature": "void stansi();",
      "Comments": [
        "Set ANSI handling to useracc setting"
      ]
    },
    {
      "name": "STATUS",
      "ord": 565,
      "Signature": "int status;",
      "Comments": [
        "Raw status from btusts, where appropriate"
      ]
    },
    {
      "name": "STGOPT",
      "ord": 566,
      "Signature": "char *string=stgopt(int msgnum);",
      "Comments": [
        "Gets a string from an MCV file"
      ],
      "SignatureFormat": "char *string=stgopt({0});",
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "int",
          "Operand": 0,
          "Name": "Message Number"
        }
      ],
      "ReturnValues": [
        {
          "Offset": 3,
          "Op": "MOV",
          "Type": "string",
          "Name": "stringOption",
          "Comment": "AX holds pointer, DX holds size in return from function"
        }
      ]
    },
    {
      "name": "STIME",
      "ord": 567,
      "Signature" : "int stime(long *tp);",
      "Comments": [
        "stime - sets time"
      ]
    },
    {
      "name": "STOP_POLLING",
      "ord": 568,
      "Signature" : "void stop_polling(int unum);",
      "Comments": [
        "Stop polling for the specified user number channel"
      ]
    },
    {
      "name": "STPBTV",
      "ord": 569,
      "Signature": "int stpbtv (void *recptr, int stpopt);",
      "Comments": [
        "'Step' based Btrieve operation"
      ]
    },
    {
      "name": "STRANSLEN",
      "ord": 570,
      "Signature" : "int stranslen(char *anstg);",
      "Comments": [
        "find length of answer string (incl final '\\0\\0')"
      ]
    },
    {
      "name": "STRCAT",
      "ord": 571,
      "Signature": "char *strcat(char *destination, const char *source );",
      "Comments": [
        "Concatenates two strings"
      ]
    },
    {
      "name": "STRCHR",
      "ord": 572,
      "Signature": "char * strchr ( const char * str, int character );",
      "Comments": [
        "Returns a pointer to the first occuence of character in the C string str"
      ]
    },
    {
      "name": "STRCMP",
      "ord": 573,
      "Signature": "int strcmp ( const char * str1, const char * str2 );",
      "Comments": [
        "Compares the C string str1 to the C string str2"
      ]
    },
    {
      "name": "STRCPY",
      "ord": 574,
      "Signature": "char* strcpy(char* destination, const char* source );",
      "Comments": [
        "Copies the C string pointed by source into the array pointed by destination, including the terminating null character"
      ]
    },
    {
      "name": "STRDUP",
      "ord": 575,
      "Signature" : "char *strdup(const char *str);",
      "Comments": [
        "strdup - copies a string into a newly-created location"
      ]
    },
    {
      "name": "STRICMP",
      "ord": 576,
      "Signature": "int stricmp(const char *string1, const char *string2);",
      "Comments": [
        "Compares strings without case sensitivity",
        "0 == same"
      ]
    },
    {
      "name": "STRIPB",
      "ord": 577,
      "Signature" : "void stripb(char *stg);",
      "Comments": []
    },
    {
      "name": "STRLEN",
      "ord": 578,
      "Signature": "size_t strlen(const char* str);",
      "Comments": [
        "Returns the length of the C string str."
      ]
    },
    {
      "name": "STRLWR",
      "ord": 579,
      "Signature": "char *lower=strlwr(char *string);",
      "Comments": [
        "Converts all uppercase letters in the string to lowercase"
      ]
    },
    {
      "name": "STRNCAT",
      "ord": 580,
      "Signature": "char *strncat(char *destination, const char *source, size_t num );",
      "Comments": [
        "Appends the first num characters of source to destination, plus a terminating null-character."
      ]
    },
    {
      "name": "STRNCMP",
      "ord": 581,
      "Signature" : "int strncmp(const char *str1, const char *str2, size_t maxlen);",
      "Comments": [
        "strncmp - compare one string to another"
      ]
    },
    {
      "name": "STRNCPY",
      "ord": 582,
      "Signature": "char *strncpy(char *destination, const char *source, size_t num);",
      "Comments": [
        "Copies characters from a string"
      ]
    },
    {
      "name": "STRPLN",
      "ord": 583,
      "Signature" : "int strpln(char *stg);",
      "Comments": []
    },
    {
      "name": "STRSTR",
      "ord": 584,
      "Signature": "char * strstr(char *str1, const char *str2 );",
      "Comments": [
        "Returns a pointer to the first occurence of str2 in str1, or a null pointer if str2 is not part of str1"
      ]
    },
    {
      "name": "STRTOK",
      "ord": 585,
      "Signature": "char *strtok(char *str, const char *delimiters );",
      "Comments": [
        "Splits the specified string into tokens based on the delimiters"
      ]
    },
    {
      "name": "STRTOL",
      "ord": 586,
      "Signature" : "long strtol(const char *strP, char **suffixPP, int radix);",
      "Comments": [
        "strtol - convert a string to a long integer"
      ]
    },
    {
      "name": "STRUPR",
      "ord": 587,
      "Signature": "char *upper=strlwr(char *string);",
      "Comments": [
        "Converts all lowercase letters in 'string' to uppercase"
      ]
    },
    {
      "name": "STTBTV",
      "ord": 588,
      "Signature": "void sttbtv (int len);",
      "Comments": []
    },
    {
      "name": "STZCPY",
      "ord": 589,
      "Signature": "stzcpy(char *dest, char *source, int nbytes);",
      "Comments": [
        "Copies a string with a limit"
      ]
    },
    {
      "name": "SUBVERS",
      "ord": 590,
      "Signature" : "char subvers[SBVSIZ];",
      "Comments": [
        "Sub-version info, ext ed rls letters"
      ]
    },
    {
      "name": "SUPCHC",
      "ord": 591,
      "Signature" : "void supchc(int n,char *chcs[],int upx,int upy,int lox,int loy,int escok);",
      "Comments": []
    },
    {
      "name": "SUPMB",
      "ord": 592,
      "Signature" : "FILE *supmb;",
      "Comments": [
        "Signup named-message file pointer"
      ]
    },
    {
      "name": "SV",
      "ord": 593,
      "Signature": "struct sysvbl sv;",
      "Comments": [
        "System-Variable Btrieve Record Layout Struct (1 of 3)"
      ]
    },
    {
      "name": "SV2",
      "ord": 594,
      "Signature": "struct sysvb2 sv2;",
      "Comments": [
        "System-Variable Btrieve Record Layout Struct (2 of 3)"
      ]
    },
    {
      "name": "SWTCLS",
      "ord": 595,
      "Signature" : "void swtcls(struct usracc *uacc, int makprm, char *clsnam, int dest, int days);",
      "Comments": [
        "Switch user to another class"
      ]
    },
    {
      "name": "SYSSTG",
      "ord": 596,
      "Signature" : "char *sysstg[];",
      "Comments": [
        "System type description strings"
      ]
    },
    {
      "name": "TAGTHS",
      "ord": 597,
      "Signature" : "char * tagths(int (*tshndl)(int tshcod));",
      "Comments": [
        "Return tagspec of othusn/othusp if handler is same"
      ]
    },
    {
      "name": "TELL",
      "ord": 598,
      "Signature" : "long tell(int handle);",
      "Comments": [
        "tell gets the current position of the file pointer associated with handle and expresses it as the number of bytes from the beginning of the file."
      ]
    },
    {
      "name": "TIME",
      "ord": 599,
      "Signature": "time_t time (time_t* timer);",
      "Comments": [
        "Get the current calendar time as a value of type time_t."
      ]
    },
    {
      "name": "TJOINROU",
      "ord": 600,
      "Signature" : "void (*tjoinrou)();",
      "Comments": [
        "Teleconference 'join from other' rouptr"
      ]
    },
    {
      "name": "TODAY",
      "ord": 601,
      "Signature": "int date=today();",
      "Comments": [
        "Find out today's date coded as YYYYYYYMMMMDDDDD",
        "(YYYYYYY-1980) * 512 representing 1980 through 2170",
        "(MMMM*32) representing 1 through 12",
        "DDDDD representing 1 through 31"
      ]
    },
    {
      "name": "TOKOPT",
      "ord": 602,
      "Signature": "int index=tokopt(int msgnum, char *token1, chat *token2,....,NULL);",
      "Comments": [
        "Checks a type E CNF option for one of several possible values",
        "0 == not found, >= 1 == token number that was found"
      ]
    },
    {
      "name": "TOLOWER",
      "ord": 603,
      "Signature": "int tolower (int c);",
      "Comments": [
        "Converts a uppercase letter to lowercase"
      ]
    },
    {
      "name": "TOUPPER",
      "ord": 604,
      "Signature": "int toupper (int c);",
      "Comments": [
        "Converts a lowercase letter to uppercase"
      ]
    },
    {
      "name": "TPWIPE",
      "ord": 605,
      "Signature" : "void tpwipe(char *templt, int fldi, int preitems, int postitems);",
      "Comments": [
        "Wipe out supporting text surrounding field in template"
      ]
    },
    {
      "name": "TSHMSG",
      "ord": 606,
      "Signature" : "char tshmsg[TSHLEN+1];",
      "Comments": [
        "Universal global Tagspec Handler message"
      ]
    },
    {
      "name": "TSTCRD",
      "ord": 607,
      "Signature": "int enuf=tstcrd(long amount);",
      "Comments": [
        "Test if the user has enough credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "TZSET",
      "ord": 608,
      "Signature" : "void tzset(void);",
      "Comments": [
        "sets local timezone info base on the 'TZ' environment string"
      ]
    },
    {
      "name": "UIDKEY",
      "ord": 609,
      "Signature" : "int uidkey(char *uid,char *lock);",
      "Comments": []
    },
    {
      "name": "UIDXRF",
      "ord": 610,
      "Signature": "struct uidxrf;",
      "Comments": [
        "User-id cross reference structure"
      ]
    },
    {
      "name": "UINSYS",
      "ord": 611,
      "Signature": "int ison=uinsys(char *usrid);",
      "Comments": [
        "Determine if a user is online",
        "1 == online anywhere in the system"
      ]
    },
    {
      "name": "UISUSN",
      "ord": 612,
      "Signature": "int uisusn;",
      "Comments": [
        "Global Variable set when uinsys() returns 1"
      ]
    },
    {
      "name": "ULTOA",
      "ord": 613,
      "Signature" : "char *ultoa(unsigned long value, char *strP, int radix);",
      "Comments": [
        "ultoa - converts an unsigned long to a string"
      ]
    },
    {
      "name": "UNFREZ",
      "ord": 614,
      "Signature" : "void unfrez(void);",
      "Comments": []
    },
    {
      "name": "UNGETC",
      "ord": 615,
      "Signature": "int ungetc(int character,FILE *stream );",
      "Comments": [
        "Ungets character from stream and decreases the internal file position by 1"
      ]
    },
    {
      "name": "UNIXTODOS",
      "ord": 616,
      "Signature" : "void unixtodos(long time, struct date *d, struct time *t);",
      "Comments": [
        "unixtodos - converts from UNIX-format time"
      ]
    },
    {
      "name": "UNLINK",
      "ord": 617,
      "Signature" : "int unlink(const char *filename);",
      "Comments": [
        "unlink - deletes a file"
      ]
    },
    {
      "name": "UNPAD",
      "ord": 618,
      "Signature": "char *bufptr=unpad(char *string);",
      "Comments": [
        "Remove trailing blanks from input string"
      ]
    },
    {
      "name": "UPDACC",
      "ord": 619,
      "Signature" : "void updacc(void);",
      "Comments": [
        "Update a user's account utility"
      ]
    },
    {
      "name": "UPDBCKGND",
      "ord": 620,
      "Signature" : "void updbckgnd(void);",
      "Comments": []
    },
    {
      "name": "UPDBTV",
      "ord": 621,
      "Signature": "void updbtv(char *recptr);",
      "Comments": [
        "Update the Btrieve current record"
      ]
    },
    {
      "name": "UPVBTV",
      "ord": 622,
      "Signature": "void upvbtv(char *recptr, int length);",
      "Comments": [
        "Update variable length Btrieve record"
      ]
    },
    {
      "name": "USAPTR",
      "ord": 624,
      "Signature": "struct usracc *usaptr;",
      "Comments": [
        "Points to that channel's 'usracc' struct"
      ]
    },
    {
      "name": "USER",
      "ord": 625,
      "Signature": "struct user;",
      "Comments": [
        "Contains information about the current user account (class, state, baud, etc.)"
      ]
    },
    {
      "name": "USRACC",
      "ord": 626,
      "Signature": "void *usracc;",
      "Comments": [
        "Fummy user account table pointer",
        "DO NOT USE THIS POINTER -- USE UACOFF()"
      ]
    },
    {
      "name": "USRIDX",
      "ord": 627,
      "Signature": "int usridx(int chan);",
      "Comments": [
        "Find 'usernum' given visible channel number"
      ]
    },
    {
      "name": "USRNUM",
      "ord": 628,
      "Signature": "int usrnum;",
      "Comments": [
        "Property with the User Number (Channel) of the user currently being serviced"
      ]
    },
    {
      "name": "USRPTR",
      "ord": 629,
      "Signature": "struct user *usrptr;",
      "Comments": [
        "Points to that channels 'user' struct"
      ]
    },
    {
      "name": "USRSON",
      "ord": 630,
      "Signature" : "void usrson(void);",
      "Comments": [
        "Display-users-online utility"
      ]
    },
    {
      "name": "VALDPC",
      "ord": 631,
      "Signature" : "int valdpc(char *prot);",
      "Comments": []
    },
    {
      "name": "VALIDIG",
      "ord": 632,
      "Signature" : "int validig(int c);",
      "Comments": []
    },
    {
      "name": "VALIDYN",
      "ord": 633,
      "Signature" : "int validyn(int c,char *stg);",
      "Comments": []
    },
    {
      "name": "VALPSW",
      "ord": 634,
      "Signature" : "int valpsw(char *psw);",
      "Comments": []
    },
    {
      "name": "VALUPC",
      "ord": 635,
      "Signature" : "int valupc(char *prot);",
      "Comments": [
        "Is this a valid upload protocol?"
      ]
    },
    {
      "name": "VDAOFF",
      "ord": 636,
      "Signature": "char *vdaoff(int unum);",
      "Comments": [
        "Compute volatile data pointer for another user"
      ]
    },
    {
      "name": "VDAPTR",
      "ord": 637,
      "Signature": "char *vdaptr;",
      "Comments": [
        "Points to the Volatile Data Area",
        "This is memory allocated for a channel and is used by the routines of a module"
      ]
    },
    {
      "name": "VDAREA",
      "ord": 638,
      "Signature" : "char *vdarea;",
      "Comments": [
        "Pointer to first vda element (bkwd. comp.)"
      ]
    },
    {
      "name": "VDASIZ",
      "ord": 639,
      "Signature": "int vdasiz;",
      "Comments": [
        "Maximum size requirement of volatile data"
      ]
    },
    {
      "name": "VDATMP",
      "ord": 640,
      "Signature": "char *vdatmp;",
      "Comments": [
        "Points to the ad-hoc Volatile Data Area"
      ]
    },
    {
      "name": "VFYADN",
      "ord": 641,
      "Signature" : "int vfyadn(int fldno, char *answer);",
      "Comments": [
        "Factory-issue field verify routine, for ask-done-at-end scheme"
      ]
    },
    {
      "name": "VIDALC",
      "ord": 642,
      "Signature" : "void *vidalc(int len);",
      "Comments": []
    },
    {
      "name": "VSPRINTF",
      "ord": 643,
      "Signature": "int vsprintf(char *s, const char *format, va_list arg);",
      "Comments": [
        "Writes formatted data from variable argument list to string"
      ]
    },
    {
      "name": "VSSCANF",
      "ord": 644,
      "Signature" : "int vsscanf(const char *string,const char *format, va_list argp);",
      "Comments": [
        "vsscanf - gets formatted input from a string"
      ]
    },
    {
      "name": "WTWAIT",
      "ord": 645,
      "Signature" : "int wtwait(lomin,himin);",
      "Comments": [
        "Interpolate between time limits for lo/hi usage"
      ]
    },
    {
      "name": "XLTCTLS",
      "ord": 646,
      "Signature": "void xltctls(char *txtbuf);",
      "Comments": [
        "Translate ASCII control characters"
      ]
    },
    {
      "name": "XLTMNU",
      "ord": 647,
      "Signature" : "void xltmnu(char *buffer);",
      "Comments": []
    },
    {
      "name": "XLTTXV",
      "ord": 648,
      "Signature": "char *xlttxv(char *buffer,int size);",
      "Comments": [
        "Translate buffer (possible tvars)"
      ]
    },
    {
      "name": "XYRTRM",
      "ord": 649,
      "Signature" : "void xyrtrm(char *msg);",
      "Comments": [
        "Terminate X/YMODEM receive session gracefully"
      ]
    },
    {
      "name": "YNOPT",
      "ord": 650,
      "Signature": "int ynopt(int msgnum);",
      "SignatureFormat": "int ynopt({0});",
      "Comments": [
        "Retrieves a yes/no option from an MCV file, flag == 1 if value started with 'Y'"
      ],
      "PrecedingInstructions": [
        {
          "Offset": -1,
          "Op": "PUSH",
          "Type": "int",
          "Name": "Message Number"
        }
      ],
      "ReturnValues": [
        {
          "Offset": 2,
          "Op": "MOV",
          "Type": "int",
          "Name": "Loaded Variable"
        }
      ]
    },
    {
      "name": "ZAFILID",
      "ord": 651,
      "Signature" : "int zafilid(char *recbuf);",
      "Comments": [
        "Identify File type"
      ]
    },
    {
      "name": "ZONKHL",
      "ord": 652,
      "Signature" : "void zonkhl(char *stg);",
      "Comments": []
    },
    {
      "name": "_DGROUP",
      "ord": 653,
      "Comments": [
        "The DGROUP variable is used to reload DS with DGROUP"
      ]
    },
    {
      "name": "F_LDIV",
      "ord": 654,
      "Comments": [
        "Long Division (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "F_LMOD",
      "ord": 655,
      "Comments": [
        "Modulo (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "F_LUDIV",
      "ord": 656,
      "Comments": [
        "Long Division, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "F_LUMOD",
      "ord": 657,
      "Comments": [
        "Modulo, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "F_LXLSH",
      "ord": 658,
      "Comments": [
        "Long Shift Left (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "F_LXMUL",
      "ord": 659,
      "Comments": [
        "Long Multiplication (Borland C++ Implicit Function)",
        "Output: DX:AX = DX:AX * CX:BX"
      ]
    },
    {
      "name": "F_LXRSH",
      "ord": 660,
      "Comments": [
        "Long Shift Right (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "F_LXURSH",
      "ord": 661,
      "Comments": [
        "Long Shift Right, non-significant (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "F_PADD",
      "ord": 662,
      "Comments": [
        "Long Pointer addition (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "F_PCMP",
      "ord": 663,
      "Comments": [
        "Long pointer comparison (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "F_PSUB",
      "ord": 664,
      "Comments": [
        "Long Pointer subtraction (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "F_SCOPY",
      "ord": 665,
      "Comments": [
        "Copies Struct into another Struct (Borland C++ Implicit Function)",
        "Aguments: Two Far Pointers, 1st == Source, 2nd == Destination"
      ]
    },
    {
      "name": "LDIV",
      "ord": 666,
      "Comments": [
        "Long Division (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "LMOD",
      "ord": 667,
      "Comments": [
        "Modulo (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "LUDIV",
      "ord": 668,
      "Comments": [
        "Long Division, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "LUMOD",
      "ord": 669,
      "Comments": [
        "Modulo, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "LXLSH",
      "ord": 670,
      "Comments": [
        "Long Shift Left (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "LXMUL",
      "ord": 671,
      "Comments": [
        "Long Multiplication (Borland C++ Implicit Function)",
        "Output: DX:AX = DX:AX * CX:BX"
      ]
    },
    {
      "name": "LXRSH",
      "ord": 672,
      "Comments": [
        "Long Shift Right (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "LXURSH",
      "ord": 673,
      "Comments": [
        "Long Shift Right, non-significant (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "N_LDIV",
      "ord": 674,
      "Comments": [
        "Long Division (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "N_LMOD",
      "ord": 675,
      "Comments": [
        "Modulo (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "N_LUDIV",
      "ord": 676,
      "Comments": [
        "Long Division, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 / arg2"
      ]
    },
    {
      "name": "N_LUMOD",
      "ord": 677,
      "Comments": [
        "Modulo, non-significant (Borland C++ Implicit Function)",
        "Input: Two long values on stack",
        "Output: DX:AX = arg1 % arg2"
      ]
    },
    {
      "name": "N_LXLSH",
      "ord": 678,
      "Comments": [
        "Long Shift Left (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "N_LXMUL",
      "ord": 679,
      "Comments": [
        "Long Multiplication (Borland C++ Implicit Function)",
        "Output: DX:AX = DX:AX * CX:BX"
      ]
    },
    {
      "name": "N_LXRSH",
      "ord": 680,
      "Comments": [
        "Long Shift Right (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "N_LXURSH",
      "ord": 681,
      "Comments": [
        "Long Shift Right, non-significant (Borland C++ Implicit Function)",
        "DX:AX == Long Value",
        "CL == How many to move"
      ]
    },
    {
      "name": "N_PADD",
      "ord": 682,
      "Comments": [
        "Long Pointer addition (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "N_PCMP",
      "ord": 683,
      "Comments": [
        "Long Pointer comparison (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "N_PSUB",
      "ord": 684,
      "Comments": [
        "Large Pointer subtraction (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "PADD",
      "ord": 685,
      "Comments": [
        "Long Pointer addition (Borland C++ Implicit Function)",
        "Alias for F_PADD"
      ]
    },
    {
      "name": "PCMP",
      "ord": 686,
      "Comments": [
        "Long Pointer comparison (Borland C++ Implicit Function)",
        "compares two pointers on the stack, sets the condition codes"
      ]
    },
    {
      "name": "PSUB",
      "ord": 687,
      "Comments": [
        "Large Pointer subtraction (Borland C++ Implicit Function)"
      ]
    },
    {
      "name": "SCOPY",
      "ord": 688,
      "Comments": [
        "Copies Struct into another Struct (Borland C++ Implicit Function)",
        "Aguments: Two Far Pointers, 1st == Source, 2nd == Destination"
      ]
    },
    {
      "name": "SPMHALLOC",
      "ord": 689,
      "Comments": []
    },
    {
      "name": "SPMHEXPAND",
      "ord": 690,
      "Comments": []
    },
    {
      "name": "SPMHFREE",
      "ord": 691,
      "Comments": []
    },
    {
      "name": "SPMHINIT",
      "ord": 692,
      "Comments": []
    },
    {
      "name": "SPMHMOVE",
      "ord": 693,
      "Comments": []
    },
    {
      "name": "FND1ST",
      "ord": 694,
      "Signature": "int yes=fndlst(struct fndblk &fb, filespec, char attr);",
      "Comments": [
        "Any files in this filespec?",
        "1 == 1 or more, 0 = none"
      ]
    },
    {
      "name": "FNDNXT",
      "ord": 695,
      "Signature": "int yes=fndnxt(struct fndblk &fb);",
      "Comments": [
        "Any more files in this filespec?",
        "1 == yes, 0 == no more"
      ]
    },
    {
      "name": "FTFPSP",
      "ord": 696,
      "Signature" : "struct ftfpsp {...};",
      "Comments": [
        "File transfer protocol specifications"
      ]
    },
    {
      "name": "DLKEYS",
      "ord": 697,
      "Signature" : "void dlkeys(char *uid);",
      "Comments": []
    },
    {
      "name": "LVCHAT",
      "ord": 698,
      "Signature" : "void lvchat(void);",
      "Comments": []
    },
    {
      "name": "ENTCHT",
      "ord": 699,
      "Signature" : "void entcht(void);",
      "Comments": []
    },
    {
      "name": "RMTSYS",
      "ord": 700,
      "Signature" : "int rmtsys;",
      "Comments": [
        "Remote sysop emulation channel (-1 if no)"
      ]
    },
    {
      "name": "PRINTF",
      "ord": 701,
      "Signature" : "int printf(const char *format, ...);",
      "Comments": [
        "printf - send formatted output to stdout"
      ]
    },
    {
      "name": "MTRUNI",
      "ord": 702,
      "Signature" : "unsigned int mtruni;",
      "Comments": [
        "CNC returned unsigned integer"
      ]
    },
    {
      "name": "MTRINT",
      "ord": 703,
      "Signature" : "int mtrint;",
      "Comments": [
        "CNC returned integer"
      ]
    },
    {
      "name": "MTRBUF",
      "ord": 704,
      "Signature" : "char mtrbuf[MTRBUF_SIZ];",
      "Comments": [
        "CNC string buffer"
      ]
    },
    {
      "name": "GRPNUM",
      "ord": 705,
      "Signature": "int *grpnum;",
      "Comments": [
        "Array of group numbers, by channel number"
      ]
    },
    {
      "name": "MXBAUD",
      "ord": 706,
      "Signature" : "unsigned mxbaud[];",
      "Comments": [
        "Array of maximum baud rated, by channel group"
      ]
    },
    {
      "name": "GRTYPE",
      "ord": 707,
      "Signature" : "char grtype[NGROUPS];",
      "Comments": [
        "Array of Group Type codes"
      ]
    },
    {
      "name": "MTRETV",
      "ord": 708,
      "Signature" : "int mtretv;",
      "Comments": [
        "CNC last return value"
      ]
    },
    {
      "name": "WHOMON",
      "ord": 709,
      "Signature" : "int whomon;",
      "Comments": [
        "Channel being monitored by GALFTSC.C"
      ]
    },
    {
      "name": "FTFTCK",
      "ord": 710,
      "Signature" : "unsigned int ftftck;",
      "Comments": [
        "16 Hertz counter for FTF stuff"
      ]
    },
    {
      "name": "FTSCOPE",
      "ord": 711,
      "Signature" : "void (*ftscope)();",
      "Comments": [
        "GALFTSC.C entry point, if any"
      ]
    },
    {
      "name": "STPANS",
      "ord": 712,
      "Signature": "char *stpans(char *str);",
      "Comments": []
    },
    {
      "name": "UACOFF",
      "ord": 713,
      "Signature": "struct usracc *uaptr=uacoff(unum);",
      "Comments": [
        "Gets the online user account info"
      ]
    },
    {
      "name": "HICHP1",
      "ord": 714,
      "Signature": "int hichp1;",
      "Comments": [
        "Highest Channel numberin use, plus 1"
      ]
    },
    {
      "name": "CHANTY",
      "ord": 715,
      "Signature" : "char chanty[NGROUPS];",
      "Comments": [
        "Array of btusdf() codes for LAN chan grps"
      ]
    },
    {
      "name": "CHANTN",
      "ord": 716,
      "Signature" : "char *chantn[]={'IPXD','IPXV','SPX'};",
      "Comments": [
        "LAN channel type names"
      ]
    },
    {
      "name": "NUMCAT",
      "ord": 717,
      "Signature": "int numcat;",
      "Comments": [
        "Number of cancat'd commands so far"
      ]
    },
    {
      "name": "SYSKEY",
      "ord": 718,
      "Signature" : "char *syskey;",
      "Comments": [
        "Key for 'sysop' powers: profanity and idle "
      ]
    },
    {
      "name": "CHGTIME",
      "ord": 719,
      "Signature": "char *chgtime;",
      "Comments": [
        "Minimum connect time to be charged"
      ]
    },
    {
      "name": "MMUATR",
      "ord": 720,
      "Signature": "char *mmuatr;",
      "Comments": [
        "Default attribute for main menu selections"
      ]
    },
    {
      "name": "ANSDIM",
      "ord": 721,
      "Signature": "char *ansdim;",
      "Comments": [
        "Dimmed attribute for main menu selections"
      ]
    },
    {
      "name": "VISPSW",
      "ord": 722,
      "Signature": "int vispsw;",
      "Comments": [
        "Make passwords visible in detail displays?"
      ]
    },
    {
      "name": "MAXCAT",
      "ord": 724,
      "Signature": "int maxcat;",
      "Comments": [
        "Maximum number of concat'd commands"
      ]
    },
    {
      "name": "SVRATE",
      "ord": 725,
      "Signature": "int svrate;",
      "Comments": [
        "How many seconds between saving sysvbls?"
      ]
    },
    {
      "name": "DFTINJ",
      "ord": 726,
      "Signature": "void dftinj(void);",
      "Comments": []
    },
    {
      "name": "NOALEN",
      "ord": 727,
      "Signature" : "int noalen(char *stg);",
      "Comments": []
    },
    {
      "name": "SKPANS",
      "ord": 728,
      "Signature" : "char *skpans(char *stg);",
      "Comments": []
    },
    {
      "name": "INSDBZ",
      "ord": 729,
      "Signature" : "void insdbz(void);",
      "Comments": []
    },
    {
      "name": "MNUDNL",
      "ord": 730,
      "Signature" : "int mnudnl;",
      "Comments": [
        "User downloading BBSMENU.DAT (or -1)"
      ]
    },
    {
      "name": "CHMOD",
      "ord": 731,
      "Signature" : "int chmod(const char *filename, int permiss);",
      "Comments": [
        "chmod - changes access mode of file"
      ]
    },
    {
      "name": "STARTV",
      "ord": 732,
      "Signature" : "char *startv[NGROUPS];",
      "Comments": [
        "Array of pointers to startup AT-commands"
      ]
    },
    {
      "name": "NGLOBS",
      "ord": 733,
      "Signature" : "int nglobs;",
      "Comments": [
        "# of global command handlers in operation"
      ]
    },
    {
      "name": "GLOBS",
      "ord": 734,
      "Signature" : "int (*globs[GLBMAX])();",
      "Comments": [
        "Array of ptrs to glbl cmd hdlr functions"
      ]
    },
    {
      "name": "HDLCON",
      "ord": 735,
      "Signature" : "void (*hdlcon)();",
      "Comments": [
        "Handle connection with user"
      ]
    },
    {
      "name": "BCC286_EXE",
      "ord": 736,
      "Comments": []
    },
    {
      "name": "_8087",
      "ord": 737,
      "Signature": "int _RTLENTRY _EXPDATA  _8087 = 3;",
      "Comments": [
        "The OS provides an 80387 emulator, so we can pretend that we have a coprocessor.",
        "This variable is not used by the RTL, and is provided only for compatibility with existing DOS programs."
      ]
    },
    {
      "name": "FSTAT",
      "ord": 738,
      "Signature" : "int fstat(int handle, struct stat *buff);",
      "Comments": [
        "fstat - gets open file information"
      ]
    },
    {
      "name": "OLDINEDIT",
      "ord": 739,
      "Signature" : "int oldinedit(int usn, int (*exipnt)());",
      "Comments": [
        "API for binary compatibility"
      ]
    },
    {
      "name": "STAHDL",
      "ord": 740,
      "Signature" : "int stahdl;",
      "Comments": [
        "Handle for the graph screen"
      ]
    },
    {
      "name": "BB",
      "ord": 741,
      "Signature" : "struct btvblk *bb;",
      "Comments": [
        "Current btvu file pointer set"
      ]
    },
    {
      "name": "GDEDCRD",
      "ord": 742,
      "Signature": "int enuf=gdedcrd(char *userid, long amount, int real, int asmuch);",
      "Comments": [
        "Deduct credits from any user's account",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "NTSTCRD",
      "ord": 743,
      "Signature": "int enuf=ntstcrd(char *userid, long amount, int real);",
      "Comments": [
        "Test if the offline user has enough credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "LTSTCRD",
      "ord": 744,
      "Signature": "int enuf=ltstcrd(struct usracc *uptr, long amount, int real);",
      "Comments": [
        "Tests if the user account structure has enough credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "GTSTCRD",
      "ord": 745,
      "Signature": "int enuf=gtstcrd(char *userid, long amount, int real);",
      "Comments": [
        "Tests if any user has enough credits",
        "1 == enough, 0 == not enough"
      ]
    },
    {
      "name": "UHSKEY",
      "ord": 746,
      "Signature": "int uhskey(char *uid,char *lock);",
      "Comments": [
        "Does the user have this key?",
        "1 == yes, 0 == no"
      ]
    },
    {
      "name": "UHSMKEY",
      "ord": 747,
      "Signature" : "int uhsmkey(char *uid,int mnum);",
      "Comments": []
    },
    {
      "name": "HDLC25",
      "ord": 748,
      "Signature": "void (*hdlc25)();",
      "Comments": [
        "Handle incoming X.25 call string (margv)"
      ]
    },
    {
      "name": "HDLNRG",
      "ord": 749,
      "Signature": "void (*hdlnrg)();",
      "Comments": [
        "Handle non-RING strings during AWAITC"
      ]
    },
    {
      "name": "NCHANS",
      "ord": 750,
      "Signature" : "int nchans;",
      "Comments": [
        "Number of GSBL channels defined, nterms+1?"
      ]
    },
    {
      "name": "GOMVEC",
      "ord": 752,
      "Signature" : "int (*gomvec)();",
      "Comments": [
        "Vector for cmd stg handling in gomodl()"
      ]
    },
    {
      "name": "TXTVARS",
      "ord": 753,
      "Signature": "structure txtvar { char name[TVRSIZ], char *(*varrou)() } *txtvars;",
      "Comments": [
        "Text Variable Structure"
      ]
    },
    {
      "name": "STRNICMP",
      "ord": 754,
      "Signature" : "int strnicmp(const char *str1, const char *str2, size_t maxlen);",
      "Comments": [
        "strnicmp - compare one string to another without case sensitivity"
      ]
    },
    {
      "name": "REGISTER_PSEUDOK",
      "ord": 755,
      "Signature": "int register_pseudok(char *pskbeg,int (*pskrou)(int unum,char *lock));",
      "Comments": [
        "Registers a pseudo-key routine"
      ]
    },
    {
      "name": "SCNPSK",
      "ord": 756,
      "Signature" : "int scnpsk(int unum,char *lock);",
      "Comments": []
    },
    {
      "name": "GENBB",
      "ord": 757,
      "Signature" : "BTVFILE *genbb;",
      "Comments": [
        "Generic user data file btrieve file ptr"
      ]
    },
    {
      "name": "DELGEN",
      "ord": 758,
      "Signature" : "void delgen(char *userid);",
      "Comments": []
    },
    {
      "name": "OKBDAY",
      "ord": 759,
      "Signature" : "int okbday(char *stg);",
      "Comments": []
    },
    {
      "name": "NLINGO",
      "ord": 760,
      "Signature": "int nlingo;",
      "Comments": [
        "Number of languages defined, always at least 1"
      ]
    },
    {
      "name": "CLINGO",
      "ord": 761,
      "Signature": "int clingo;",
      "Comments": [
        "Language index for the current user"
      ]
    },
    {
      "name": "LANGUAGES",
      "ord": 762,
      "Signature": "struct lingo **languages;",
      "Comments": [
        "Dynamic array of pointers to lingo structures"
      ]
    },
    {
      "name": "LNGFND",
      "ord": 763,
      "Signature" : "int lngfnd(char *lngnam);",
      "Comments": [
        "Find a language by name, -1=can't"
      ]
    },
    {
      "name": "CHGSPK",
      "ord": 764,
      "Signature" : "int chgspk(int lgo,char *spoken);",
      "Comments": [
        "Alternate spoken language? (-1=no)"
      ]
    },
    {
      "name": "CHGPRT",
      "ord": 765,
      "Signature" : "int chgprt(int lgo,char *protoc);",
      "Comments": [
        "Alternate protocol? (-1=no)"
      ]
    },
    {
      "name": "ALG1ST",
      "ord": 766,
      "Signature" : "void alg1st(int lgo);",
      "Comments": [
        "Prepare to seek alternate languages"
      ]
    },
    {
      "name": "ALGNXT",
      "ord": 767,
      "Signature" : "int algnxt(void);",
      "Comments": [
        "Seek alternate languages"
      ]
    },
    {
      "name": "TFSTATE",
      "ord": 768,
      "Signature": "int tfstate;",
      "Comments": [
        "tfsrdl() state code and return value",
        "0 == tfsrdl() done scanning file(s)",
        "1 == tfsopn() has been called, tfsrdl() calls will begin",
        "3 == tfsrdl() has a line for you",
        "4 == tfsrdl() is done with a file"
      ]
    },
    {
      "name": "TFSBUF",
      "ord": 769,
      "Signature": "char tfsbuf[MAXTFS]",
      "Comments": [
        "After tfsrdl() returns TFSLIN, the line goes here"
      ]
    },
    {
      "name": "TFSPST",
      "ord": 770,
      "Signature": "char *tfspst;",
      "Comments": [
        "When tfspfx() returns 1, this is spkwht(what follows it)"
      ]
    },
    {
      "name": "TFSFB",
      "ord": 771,
      "Signature": "struct fndblk tfsfb;",
      "Comments": [
        "fndblk structure from current file"
      ]
    },
    {
      "name": "TFSFP",
      "ord": 772,
      "Signature": "FILE *tfsfp;",
      "Comments": [
        "File pointer while tfsrdl() returns TFSLIN"
      ]
    },
    {
      "name": "TFSOPN",
      "ord": 773,
      "Signature": "int nfiles=tfsopn(char *filespec);",
      "Comments": [
        "Prepare to scan 1 or more text files",
        "TFS prefix == 'Text File Scanner'"
      ]
    },
    {
      "name": "TFSRDL",
      "ord": 774,
      "Signature": "int tfs=tfsrdl()",
      "Comments": [
        "Read the next line from the file(s) opened with tfsopn()"
      ]
    },
    {
      "name": "TFSPFX",
      "ord": 775,
      "Signature": "int found=tfspfx(char *prefix);",
      "Comments": [
        "Is the current line of a file opened with tfsopn prefixed with the specified string",
        "1 == yes, 2 == no"
      ]
    },
    {
      "name": "TFSDPR",
      "ord": 776,
      "Signature": "void tfsdrp()",
      "Comments": [
        "Strip the previx off tfsbuf and prepare for sub-prefixes (dpr stands for 'deeper')"
      ]
    },
    {
      "name": "HDLRNG",
      "ord": 777,
      "Signature": "void (*hdlrng)();",
      "Comments": [
        "Handle RING (non X-25) during AWAITC, HARING"
      ]
    },
    {
      "name": "HDLCNC",
      "ord": 778,
      "Signature": "int (*hdlcnc)();",
      "Comments": [
        "Hand non-RING whatever during HARING"
      ]
    },
    {
      "name": "PRFBUFFERS",
      "ord": 779,
      "Signature" : "char *prfbuffers;",
      "Comments": []
    },
    {
      "name": "PRFPOINTERS",
      "ord": 780,
      "Signature" : "char **prfpointers;",
      "Comments": []
    },
    {
      "name": "LINUSE",
      "ord": 781,
      "Signature" : "char *linuse;",
      "Comments": []
    },
    {
      "name": "INIMLT",
      "ord": 782,
      "Signature" : "void inimlt(unsigned pbsize);",
      "Comments": []
    },
    {
      "name": "CLRMLT",
      "ord": 783,
      "Signature": "void clrmlt();",
      "Comments": [
        "Clear the prf buffer indep of outprf",
        "Multilingual version of clrprf()"
      ]
    },
    {
      "name": "CKLONL",
      "ord": 784,
      "Signature" : "void cklonl(void);",
      "Comments": []
    },
    {
      "name": "OUTMLT",
      "ord": 785,
      "Signature": "void outmlt(int chan);",
      "Comments": [
        "Send prfbuf to a channel & clear",
        "Multilingual version of outprf()"
      ]
    },
    {
      "name": "PRFMLT",
      "ord": 786,
      "Signature": "void prfmlt(int msgno,...);",
      "Comments": [
        "Like pmlt(), but the control string comes from an .MCV file",
        "Preceding PUSH holds the Message # from the .MCV file",
        "Multilingual version of prfmsg()"
      ]
    },
    {
      "name": "PMLT",
      "ord": 787,
      "Signature": "void pmlt(char *ctlstg,...);",
      "Comments": [
        "Like printf(), except the converted text goes into a buffer",
        "Multilingual version of prf()"
      ]
    },
    {
      "name": "MLTFLG",
      "ord": 788,
      "Signature" : "int mltflg;",
      "Comments": []
    },
    {
      "name": "GETGEN",
      "ord": 789,
      "Signature" : "int getgen(struct bbsgen *genbuf,char *userid);",
      "Comments": []
    },
    {
      "name": "SETGEN",
      "ord": 790,
      "Signature" : "void setgen(struct bbsgen *genbuf);",
      "Comments": []
    },
    {
      "name": "GENBUF",
      "ord": 791,
      "Signature" : "struct bbsgen genbuf;",
      "Comments": [
        "FOr reading Main Exec records from BBSGEN.DAT"
      ]
    },
    {
      "name": "CNCLNG",
      "ord": 792,
      "Signature": "int cnclng(void);",
      "Comments": [
        "Expect a language name of language pick from a numbered list",
        "-1 == invalid name"
      ]
    },
    {
      "name": "MAXCAND",
      "ord": 793,
      "Signature" : "char maxcand;",
      "Comments": [
        "best candidate  -- cntcand() ret val"
      ]
    },
    {
      "name": "LNGLIST",
      "ord": 794,
      "Signature" : "void lnglist(int all);",
      "Comments": []
    },
    {
      "name": "DSPMLT",
      "ord": 795,
      "Signature" : "int dspmlt(msgno,parm1,parm2,parm3);",
      "Comments": [
        "Display Message based on ANSI flag"
      ]
    },
    {
      "name": "BADLANG",
      "ord": 796,
      "Signature" : "int badlang;",
      "Comments": [
        "To flag undefined languages in .MCVs"
      ]
    },
    {
      "name": "POSLNG",
      "ord": 797,
      "Signature" : "char *poslng;",
      "Comments": [
        "Possible languages autosensed"
      ]
    },
    {
      "name": "AUSTIM",
      "ord": 798,
      "Signature" : "unsigned *austim;",
      "Comments": [
        "Array[nterms] of the time of bgnaus()"
      ]
    },
    {
      "name": "NUMCAND",
      "ord": 799,
      "Signature" : "int numcand;",
      "Comments": [
        "# of candidates -- cntcand() ret val"
      ]
    },
    {
      "name": "FSTCAND",
      "ord": 800,
      "Signature" : "int fstcand;",
      "Comments": [
        "first candidate -- cntcand() ret val"
      ]
    },
    {
      "name": "AUSWAIT",
      "ord": 801,
      "Signature": "unsigned auswait;",
      "Comments": [
        "Master timeout, 1/16 of second units"
      ]
    },
    {
      "name": "NUMAUS",
      "ord": 802,
      "Signature" : "int numaus;",
      "Comments": [
        "Number of autosense handlers"
      ]
    },
    {
      "name": "LNGFOOT",
      "ord": 803,
      "Signature" : "void lngfoot(int all);",
      "Comments": []
    },
    {
      "name": "INIAUS",
      "ord": 804,
      "Signature" : "void iniaus(void);",
      "Comments": []
    },
    {
      "name": "REGAUTSNS",
      "ord": 805,
      "Signature" : "void regautsns(AUTOSENSE *aushdl);",
      "Comments": []
    },
    {
      "name": "BGNAUS",
      "ord": 806,
      "Signature" : "int bgnaus(int foreal);",
      "Comments": []
    },
    {
      "name": "PRCAUS",
      "ord": 807,
      "Signature" : "int prcaus(void);",
      "Comments": []
    },
    {
      "name": "SETBYPROT",
      "ord": 808,
      "Signature" : "void setbyprot(char *prot,char value);",
      "Comments": []
    },
    {
      "name": "CNTCAND",
      "ord": 809,
      "Signature" : "int cntcand(void);",
      "Comments": []
    },
    {
      "name": "LNGPOSN",
      "ord": 810,
      "Signature" : "int lngposn(int chc);",
      "Comments": []
    },
    {
      "name": "ECHSEC",
      "ord": 811,
      "Signature": "void echsec(char c, int width);",
      "Comments": [
        "Echo secretly (password masking)"
      ]
    },
    {
      "name": "SECCHR",
      "ord": 812,
      "Signature" : "char secchr;",
      "Comments": [
        "Character to echo when typing 'secret' field"
      ]
    },
    {
      "name": "SAMEND",
      "ord": 813,
      "Signature": "int samend(char *longs,char *ends);",
      "Comments": [
        "Compares ending of strings, checking if the first string ends with the second string (ignoring case)"
      ]
    },
    {
      "name": "FGETSTG",
      "ord": 814,
      "Signature": "int fgetstg(char *stg,int n,FILE *stream);",
      "Comments": [
        "Read a NULL-terminated string from a file"
      ]
    },
    {
      "name": "GETDFT",
      "ord": 815,
      "Signature" : "char getdft(void);",
      "Comments": []
    },
    {
      "name": "UIDARR",
      "ord": 816,
      "Signature" : "struct uidisp *uidarr;",
      "Comments": [
        "Users screen info array"
      ]
    },
    {
      "name": "PMCARE",
      "ord": 817,
      "Signature" : "char pmcare;",
      "Comments": [
        "Global for prtmnu(), hdlpmu() and subordinates"
      ]
    },
    {
      "name": "PMVALU",
      "ord": 818,
      "Signature" : "char pmvalu;",
      "Comments": [
        "Global for prtmnu(), hdlpmu() and subordinates"
      ]
    },
    {
      "name": "HDLPMU",
      "ord": 819,
      "Signature" : "void (*hdlpmu)(void);",
      "Comments": [
        "Handler chain for protocol menu"
      ]
    },
    {
      "name": "ISPVIS",
      "ord": 820,
      "Signature" : "int ispvis(struct ftfpsp *ftp);",
      "Comments": [
        "is protocol visible?"
      ]
    },
    {
      "name": "FTHEAD",
      "ord": 821,
      "Signature" : "struct ftfpsp *fthead;",
      "Comments": [
        "Address of 1st entry in prot list"
      ]
    },
    {
      "name": "FPRLOCK",
      "ord": 822,
      "Signature" : " char *fprlock;",
      "Comments": [
        "'F' protocol lock"
      ]
    },
    {
      "name": "ARCDSC",
      "ord": 823,
      "Signature" : "char *arcdsc[];",
      "Comments": [
        "Array of file descriptions, indexed by file id"
      ]
    },
    {
      "name": "LINGYN",
      "ord": 824,
      "Signature": "char lingyn(char c);",
      "Comments": [
        "Translates a user's yes/no in 'Y'/'N'"
      ]
    },
    {
      "name": "EXTPTR",
      "ord": 825,
      "Signature" : "struct extusr *extptr;",
      "Comments": [
        "Global pointer to extra info about cur usr"
      ]
    },
    {
      "name": "OTHEXP",
      "ord": 826,
      "Signature": "struct extusr *othexpi;",
      "Comments": [
        "Global Pointer to extendable in-memory structure for that user (set by onsys() or instat())"
      ]
    },
    {
      "name": "EXTOFF",
      "ord": 827,
      "Signature": "struct extusr *exptr=extoff(unum);",
      "Comments": [
        "Gets the extended User Account Information"
      ]
    },
    {
      "name": "KPAK",
      "ord": 828,
      "Signature" : "long kpak[NGROUPS];",
      "Comments": [
        "Credits consumed per kilo-packet"
      ]
    },
    {
      "name": "KSEC",
      "ord": 829,
      "Signature" : "long ksec[NGROUPS];",
      "Comments": [
        "Credits consumed per minute"
      ]
    },
    {
      "name": "KCHAR",
      "ord": 830,
      "Signature" : "long kchar[NGROUPS];",
      "Comments": [
        "Credits consumed per kilo-character"
      ]
    },
    {
      "name": "ECHTYP",
      "ord": 831,
      "Signature": "char echtyp[NGROUPS];",
      "Comments": [
        "Array of Echo Options: ",
        "0 == No Echo at all of user keystrokes",
        "1 == echo comes from users's PAD",
        "2 == Echo comes from the BBS thru X.25 net"
      ]
    },
    {
      "name": "ALCTILE",
      "ord": 832,
      "Signature": "void *bigregion=alctile(unsigned qty, unsigned sizblock);",
      "Comments": [
        "Allocate a very large memory region"
      ]
    },
    {
      "name": "PTRTILE",
      "ord": 833,
      "Signature": "void *block=ptrtile(void *bigregion, unsigned unum);",
      "Comments": [
        "Dereference an alctile() region"
      ]
    },
    {
      "name": "MKTEMP",
      "ord": 834,
      "Signature": "char *mktemp(char *template);",
      "Comments": [
        "mktemp - makes a unique file name"
      ]
    },
    {
      "name": "CHDIR",
      "ord": 835,
      "Signature" : "int chdir(const char *path);",
      "Comments": [
        "chdir - changes working directory"
      ]
    },
    {
      "name": "GETCURDIR",
      "ord": 836,
      "Signature": "int getcurdir(int drive, char *direc);",
      "Comments": [
        "getcurdir - gets current directory for specified drive",
        "drive contains a drive number (0 = default, 1 = A, etc.)"
      ]
    },
    {
      "name": "MEMCHR",
      "ord": 837,
      "Signature" : "void *memchr(const void *s, int val, size_t n);",
      "Comments": [
        "memchr - search for a character"
      ]
    },
    {
      "name": "STPCPY",
      "ord": 838,
      "Signature" : "char *stpcpy(char *dest, const char *src);",
      "Comments": [
        "#include <string.h>"
      ]
    },
    {
      "name": "STRNSET",
      "ord": 839,
      "Signature" : "char *strnset(char *str, int ch, size_t n);",
      "Comments": [
        "strnset - sets all characters in a string to a given character"
      ]
    },
    {
      "name": "STRSET",
      "ord": 840,
      "Signature" : "char *strset(char *str, int ch);",
      "Comments": [
        "strset - sets all characters in a string to a given character"
      ]
    },
    {
      "name": "CREAT",
      "ord": 841,
      "Signature" : "int creat(const char *filename, int permiss);",
      "Comments": [
        "creat - creates a new file or rewrites an existing one"
      ]
    },
    {
      "name": "FCLOSEALL",
      "ord": 842,
      "Signature" : "int fcloseall(void);",
      "Comments": [
        "fcloseall - close open streams"
      ]
    },
    {
      "name": "FREOPEN",
      "ord": 843,
      "Signature" : "FILE *freopen(const char *filename, const char *mode, FILE *stream );",
      "Comments": [
        "<cstdio>"
      ]
    },
    {
      "name": "_FSOPEN",
      "ord": 844,
      "Signature" : "FILE *_fsopen(const char *filename, char *type, int shflag);",
      "Comments": [
        "_fsopen  -  open a stream with file sharing"
      ]
    },
    {
      "name": "MEMCCPY",
      "ord": 845,
      "Signature" : "void *memccpy(void *dst, const void *src, int val, size_t n);",
      "Comments": [
        "memccpy - copy bytes from src to dst"
      ]
    },
    {
      "name": "MEMICMP",
      "ord": 846,
      "Signature" : "int memicmp(const void *s1, const void *s2, size_t n);",
      "Comments": [
        "memicmp - compares two memory areas"
      ]
    },
    {
      "name": "MOVEDATA",
      "ord": 847,
      "Signature" : "void movedata(unsigned srcseg, unsigned srcoff, unsigned dstseg, unsigned dstoff, size_t n);",
      "Comments": [
        "movedata - copy bytes"
      ]
    },
    {
      "name": "DUP",
      "ord": 848,
      "Signature" : "int dup(int handle);",
      "Comments": [
        "dup - duplicate a file handle"
      ]
    },
    {
      "name": "DUP2",
      "ord": 859,
      "Signature": "int dup2(int oldhandle, int newhandle);",
      "Comments": [
        "dup - duplicate a file handle",
        "dup2 returns a new handle with the value of newhandle."
      ]
    },
    {
      "name": "ACCESS",
      "ord": 850,
      "Signature" : "int access(const char *filename, int amode);",
      "Comments": [
        "access - determines accessibility of a file"
      ]
    },
    {
      "name": "PFNPTR",
      "ord": 860,
      "Signature" : "char *pfnptr;",
      "Comments": [
        "Pointer to profanity in string"
      ]
    },
    {
      "name": "NTVARS",
      "ord": 861,
      "Signature": "int ntvars;",
      "Comments": [
        "Number of text variables in memory"
      ]
    },
    {
      "name": "HRTVAL",
      "ord": 862,
      "Signature": "unsigned long tix64k=hrtval();",
      "Comments": [
        "Read the free-running 65khz timer (not a typo)"
      ]
    },
    {
      "name": "GOODPTR",
      "ord": 863,
      "Signature" : "int goodptr(void *ptr);",
      "Comments": []
    },
    {
      "name": "GOODSTG",
      "ord": 864,
      "Signature" : "int goodstg(char *ptr);",
      "Comments": []
    },
    {
      "name": "LISTINGQ",
      "ord": 865,
      "Signature" : "void listingq(char *path, int msgno);",
      "Comments": [
        "E-Z-Quick ASCII file listing, with prompt & substate"
      ]
    },
    {
      "name": "READ",
      "ord": 866,
      "Signature " : "int read(int handle, void *buf, unsigned nbyte);",
      "Comments": [
        "read - reads from file"
      ]
    },
    {
      "name": "WRITE",
      "ord": 867,
      "Signature": "int write(int handle, const void *buf, unsigned nbyte);",
      "Comments": [
        "write - writes to a file"
      ]
    },
    {
      "name": "DISASTER",
      "ord": 868,
      "Signature" : "jmp_buf disaster;",
      "Comments": [
        "Master longjmp() block, for catastro()"
      ]
    },
    {
      "name": "RIPDFD",
      "ord": 869,
      "Signature" : "int ripdfd;",
      "Comments": [
        "Any RIP language defined on this svr?"
      ]
    },
    {
      "name": "RIPIDX",
      "ord": 870,
      "Signature" : "int ripidx;",
      "Comments": [
        "Index into languages[] of 1st /RIP lang"
      ]
    },
    {
      "name": "AUTSCNS",
      "ord": 871,
      "Signature" : "char ***autscns;",
      "Comments": [
        "RIP_BUTTON cmd stgs, 1..MAXSEL, for all possible #'s of displayed buttons"
      ]
    },
    {
      "name": "LGRFNT",
      "ord": 872,
      "Signature" : "char *lgrfnt[];",
      "Comments": [
        "Enabled/dimmed large button font styles"
      ]
    },
    {
      "name": "LGRSTY",
      "ord": 873,
      "Signature" : "char *lgrsty[];",
      "Comments": [
        "Enabled/dimmed large button styles"
      ]
    },
    {
      "name": "SMRFNT",
      "ord": 874,
      "Signature" : "*char smrfnt[];",
      "Comments": [
        "Enabled/dimmed small button font styles"
      ]
    },
    {
      "name": "SMRSTY",
      "ord": 875,
      "Signature" : "char *smrsty[];",
      "Comments": [
        "Enabled/dimmed small button styles"
      ]
    },
    {
      "name": "FSDRHD",
      "ord": 878,
      "Signature" : "void fsdrhd (char *titl);",
      "Comments": []
    },
    {
      "name": "ALCBLOK",
      "ord": 879,
      "Signature": "void *alcblok(unsigned qty,unsigned size);",
      "Comments": [
        "Allocate a very large memory region, qty by sizblock bytes"
      ]
    },
    {
      "name": "PTRBLOK",
      "ord": 880,
      "Signature": "void *ptrblok(void *bigptr,unsigned index);",
      "Comments": [
        "Dereference an alcblok()'d region"
      ]
    },
    {
      "name": "FLDPTR",
      "ord": 881,
      "Signature" : "struct fsdfld *fldptr;",
      "Comments": [
        "Global pointer to field info"
      ]
    },
    {
      "name": "SHOFLD",
      "ord": 882,
      "Signature" : "void shofld(int attr, int justfy);",
      "Comments": [
        "Show this field (goto it, attr, contents) (ANSI only)"
      ]
    },
    {
      "name": "STRRCHR",
      "ord": 883,
      "Signature" : "char *strrchr(const char *str, int c);",
      "Comments": [
        "strrchr - scans a string for the last occurrence of a given character"
      ]
    },
    {
      "name": "F_SPUSH",
      "ord": 884,
      "Comments": [
        "Store Struct on storage (Borland C++ Implicit Function)",
        "Arguments: DX:AX - Far Pointers to the struct, CX - size in bytes"
      ]
    },
    {
      "name": "COMMAS",
      "ord": 886,
      "Signature" : "char *commas(char *intstg);",
      "Comments": []
    },
    {
      "name": "INITASK",
      "ord": 887,
      "Signature" : "int initask(void (*tskaddr)(int taskid));",
      "Comments": []
    },
    {
      "name": "MFYTASK",
      "ord": 888,
      "Signature" : "void mfytask(int taskid,void (*tskaddr)(int taskid));",
      "Comments": []
    },
    {
      "name": "SNDRST",
      "ord": 889,
      "Signature" : "int sndrst;",
      "Comments": [
        "Send RIP_RESET_WINDOWS after sw to non-RIP?"
      ]
    },
    {
      "name": "DETFLG",
      "ord": 890,
      "Signature" : "int detflg;",
      "Comments": [
        "showusr(): called from REMSYS.C"
      ]
    },
    {
      "name": "RIPMB",
      "ord": 891,
      "Signature" : "FILE *ripmb;",
      "Comments": [
        "BBSRIP.MSG"
      ]
    },
    {
      "name": "TFSABT",
      "ord": 892,
      "Signature": "void tfsabt();",
      "Comments": [
        "Aborts text file scanning"
      ]
    },
    {
      "name": "FNROOT",
      "ord": 893,
      "Signature": "char *fnroot(char *fulpth);",
      "Comments": [
        "Returns the 1-8 character file name from the specified file"
      ]
    },
    {
      "name": "FNWEXT",
      "ord": 894,
      "Signature": "char *fnwext(char *fulpth);",
      "Comments": [
        "Returns the file name with extension"
      ]
    },
    {
      "name": "RSVNAM",
      "ord": 895,
      "Signature": "int rsvnam(char *name);",
      "Comments": [
        "Checks if a file name is reserved",
        "1 == Reserved, 0 == OK"
      ]
    },
    {
      "name": "GETFTIME",
      "ord": 896,
      "Signature" : "int getftime(int handle, struct ftime *ftimep);",
      "Comments": [
        "getftime - gets file date and time"
      ]
    },
    {
      "name": "SETFTIME",
      "ord": 897,
      "Signature" : "int setftime(int handle, struct ftime *ftimep);",
      "Comments": [
        "setftime - gets file date and time"
      ]
    },
    {
      "name": "CLSIZE",
      "ord": 898,
      "Signature": "unsigned clbyts=clsize(int drive);",
      "Comments": [
        "Returns the size of the clusters on the disk"
      ]
    },
    {
      "name": "DRVNUM",
      "ord": 899,
      "Signature": "int drive=drvnum(char *path);",
      "Comments": [
        "Determine drive number from the path",
        "0 == Current, 1 == A:, 2 == B:, 3 == C:, etc."
      ]
    },
    {
      "name": "CLFIT",
      "ord": 900,
      "Signature": "long realsiz=clfit(long siz, unsigned clbyts);",
      "Comments": [
        "Total space used by a file based on cluster size"
      ]
    },
    {
      "name": "NUMBYTP",
      "ord": 901,
      "Signature" : "long numbytp;",
      "Comments": []
    },
    {
      "name": "HDEDCRD",
      "ord": 902,
      "Signature" : "long hdedcrd(struct usracc *uptr,long amt,int real,int asmuch);",
      "Comments": [
        "Deduct credits, return num. deducted"
      ]
    },
    {
      "name": "PTHOPT",
      "ord": 903,
      "Signature" : "char *pthopt(int msgnum);",
      "Comments": []
    },
    {
      "name": "RLENBTV",
      "ord": 904,
      "Signature": "int rlenbtv (void);",
      "Comments": []
    },
    {
      "name": "STZCAT",
      "ord": 905,
      "Signature": "char *stzcat(char *dst,char *src,int num);",
      "Comments": []
    },
    {
      "name": "AINSCB",
      "ord": 906,
      "Signature" : "struct ainscb *ainscb;",
      "Comments": []
    },
    {
      "name": "AINBEG",
      "ord": 907,
      "Signature" : "void ainbeg(void);",
      "Comments": [
        "Initialize ANSI-getchc() conversion session"
      ]
    },
    {
      "name": "AINCHR",
      "ord": 908,
      "Signature" : "int ainchr(char c);",
      "Comments": [
        "Translate ANSI keystrokes into getchc()-style keystrokes"
      ]
    },
    {
      "name": "VERSION",
      "ord": 909,
      "Signature": "char version[];",
      "Comments": [
        "Main version code of The MajorBBS, in form X.YY"
      ]
    },
    {
      "name": "SELENG",
      "ord": 910,
      "Comments": []
    },
    {
      "name": "SYSLOD",
      "ord": 911,
      "Signature" : "unsigned syslod;",
      "Comments": [
        "System Loading (1 percent units)"
      ]
    },
    {
      "name": "KYSBUF",
      "ord": 912,
      "Signature" : "char *kysbuf;",
      "Comments": [
        "Pointer to one-shot internal keys buffer"
      ]
    },
    {
      "name": "ANPBTVL",
      "ord": 913,
      "Signature": "int anpbtv (void *recptr, int anpopt);",
      "Comments": []
    },
    {
      "name": "SV3",
      "ord": 914,
      "Signature": "struct sysvb3 sv3;",
      "Comments": [
        "System-Variable Btrieve Record Layout Struct (3 of 3)"
      ]
    },
    {
      "name": "FTGDN1",
      "ord": 915,
      "Signature" : "int ftgdn1(char *prot, void (*retrou)())",
      "Comments": [
        "ftgsbm() replacement for copies of files already in tag list"
      ]
    },
    {
      "name": "ALWAIT",
      "ord": 916,
      "Signature" : "char alwait;",
      "Comments": [
        "Auto log-off waiting period"
      ]
    },
    {
      "name": "__BASE",
      "ord": 917,
      "Signature" : "unsigned __base;",
      "Comments": [
        "First selector of heap"
      ]
    },
    {
      "name": "__TOP",
      "ord": 918,
      "Signature" : "unsigned __top;",
      "Comments": [
        "Last selector of heap (inclusive)"
      ]
    },
    {
      "name": "__HINCR",
      "ord": 919,
      "Signature" : "unsigned __hincr;",
      "Comments": [
        "Increment between heap selectors"
      ]
    },
    {
      "name": "VALEXI",
      "ord": 920,
      "Signature" : "int valexi;",
      "Comments": [
        "Is eximod currently valid? (1 or 0)"
      ]
    },
    {
      "name": "AGENTS",
      "ord": 921,
      "Signature" : "struct agent {...} *agents;",
      "Comments": [
        "Agent information structure"
      ]
    },
    {
      "name": "MSYSID",
      "ord": 922,
      "Signature" : "char msysid[SIDSIZ];",
      "Comments": [
        "Master sysid for this system"
      ]
    },
    {
      "name": "RQDPTR",
      "ord": 923,
      "Signature" : "struct reqdat {...} *rqdptr;",
      "Comments": [
        "Engine's internal per-request data"
      ]
    },
    {
      "name": "MRQSIZ",
      "ord": 924,
      "Signature" : "int mrqsiz;",
      "Comments": [
        "Size of per-request memory area"
      ]
    },
    {
      "name": "MRQPTR",
      "ord": 925,
      "Signature" : "char *mrqptr;",
      "Comments": [
        "Pointer to per-request memory for agents"
      ]
    },
    {
      "name": "GREQID",
      "ord": 926,
      "Signature" : "int greqid;",
      "Comments": [
        "Global copy of request id underway"
      ]
    },
    {
      "name": "RSPTMP",
      "ord": 927,
      "Signature" : "char *rsptmp;",
      "Comments": [
        "Buffer for agents to store responses"
      ]
    },
    {
      "name": "NAGENTS",
      "ord": 928,
      "Signature" : "int nagents;",
      "Comments": [
        "Number of agents"
      ]
    },
    {
      "name": "GDPBB",
      "ord": 929,
      "Signature" : "BTVFILE *gdpbb;",
      "Comments": [
        "Generic dynapak database Btrieve pointer"
      ]
    },
    {
      "name": "REGISTER_AGENT",
      "ord": 930,
      "Signature" : "void register_agent(struct agent *agdptr);",
      "Comments": []
    },
    {
      "name": "HOOK_CONNECT",
      "ord": 931,
      "Signature" : "void hook_connect(void (*conrou)(void));",
      "Comments": []
    },
    {
      "name": "HOOK_DISCONNECT",
      "ord": 932,
      "Signature" : "void hook_disconnect(void (*dscrou)(void));",
      "Comments": []
    },
    {
      "name": "HOOK_CLEANUP",
      "ord": 933,
      "Signature" : "void hook_cleanup(void (*mcurou)(void));",
      "Comments": []
    },
    {
      "name": "HOOK_DELACCT",
      "ord": 934,
      "Signature" : "void hook_delacct(void (*dlarou)(char *userid));",
      "Comments": []
    },
    {
      "name": "HOOK_SHUTDOWN",
      "ord": 935,
      "Signature" : "void hook_shutdown(void (*finrou)(void));",
      "Comments": []
    },
    {
      "name": "CURCSU",
      "ord": 936,
      "Signature" : "void curcsu(int chan);",
      "Comments": []
    },
    {
      "name": "CURREQ",
      "ord": 937,
      "Signature" : "void curreq(int reqid);",
      "Comments": []
    },
    {
      "name": "RSP2READ",
      "ord": 938,
      "Signature" : "void rsp2read(struct saunam *name,unsigned length,void *value);",
      "Comments": []
    },
    {
      "name": "OK2WRITE",
      "ord": 939,
      "Signature" : "void ok2write(char *filespec);",
      "Comments": []
    },
    {
      "name": "RSP2WRITE",
      "ord": 940,
      "Signature" : "void rsp2write(BOOL ok,unsigned length,void *data);",
      "Comments": []
    },
    {
      "name": "STDCHK",
      "ord": 941,
      "Signature" : "BOOL stdchk(char *key);",
      "Comments": [
        "Does current C/S user have key?"
      ]
    },
    {
      "name": "REJECTREQ",
      "ord": 942,
      "Signature" : "void rejectreq(void);",
      "Comments": []
    },
    {
      "name": "SENDDPK",
      "ord": 943,
      "Signature" : "void senddpk(int chan,char *dstapp,int priority,struct saunam *dpknam, unsigned length,void *value);",
      "Comments": []
    },
    {
      "name": "QROOM",
      "ord": 944,
      "Signature" : "BOOL qroom(int chan,int priority);",
      "Comments": []
    },
    {
      "name": "DCLMRQ",
      "ord": 945,
      "Signature" : "void dclmrq(int minsiz);",
      "Comments": []
    },
    {
      "name": "MRQOFF",
      "ord": 946,
      "Signature" : "char *mrqoff(int reqid);",
      "Comments": []
    },
    {
      "name": "CYCLEME",
      "ord": 947,
      "Signature" : "void cycleme(void (*cycaddr)(void));",
      "Comments": []
    },
    {
      "name": "READGDP",
      "ord": 948,
      "Signature" : "int  readgdp(int direction,struct saunam *name,unsigned length,void *dest);",
      "Comments": []
    },
    {
      "name": "WRITEGDP",
      "ord": 949,
      "Signature" : "void writegdp(struct saunam *name,unsigned length,void *value);",
      "Comments": []
    },
    {
      "name": "NEWARR",
      "ord": 950,
      "Signature" : "int newarr(int incsiz,unsigned elemsiz);",
      "Comments": []
    },
    {
      "name": "ADD2ARR",
      "ord": 951,
      "Signature" : "void *add2arr(int arrhdl,void *newelem);",
      "Comments": []
    },
    {
      "name": "ARRBAS",
      "ord": 952,
      "Signature" : "void *arrbas(int arrhdl);",
      "Comments": []
    },
    {
      "name": "NINARR",
      "ord": 953,
      "Signature" : "int ninarr(int arrhdl);",
      "Comments": []
    },
    {
      "name": "ARRELEM",
      "ord": 954,
      "Signature" : "void *arrelem(int arrhdl,int index);",
      "Comments": []
    },
    {
      "name": "SAMPKY",
      "ord": 955,
      "Signature" : "char *sampky;",
      "Comments": [
        "Key required to log on reserved channels"
      ]
    },
    {
      "name": "SAMPLN",
      "ord": 956,
      "Signature": "int sampln;",
      "Comments": [
        "Number of 'free sample' channels"
      ]
    },
    {
      "name": "R2RPRF",
      "ord": 957,
      "Signature" : "void r2rprf(struct saunam *name);",
      "Comments": [
        "Respond to read with prfbuf contents"
      ]
    },
    {
      "name": "R2WPRF",
      "ord": 958,
      "Signature" : "void r2wprf(BOOL ok);",
      "Comments": [
        "Respond to write w/ prfbuf contents"
      ]
    },
    {
      "name": "STLCPY",
      "ord": 959,
      "Signature" : "char *stlcpy(char *dst,char *src,unsigned num);",
      "Comments": []
    },
    {
      "name": "STP4CS",
      "ord": 960,
      "Signature" : "char *stp4cs(char *buf);",
      "Comments": [
        "Strip buffer for C/S output"
      ]
    },
    {
      "name": "SAMEPATU",
      "ord": 961,
      "Signature" : "BOOL samepatu(char *sau1,char *sau2,BOOL exact);",
      "Comments": []
    },
    {
      "name": "SGNUSZ",
      "ord": 962,
      "Signature" : "int sgnusz",
      "Comments": [
        "Maximum size of User-IDs for new signups"
      ]
    },
    {
      "name": "FULALW",
      "ord": 963,
      "Signature" : "int fulalw;",
      "Comments": [
        "Full names allowed as User-IDs?"
      ]
    },
    {
      "name": "NAMDFT",
      "ord": 964,
      "Signature" : "int namdft;",
      "Comments": [
        "How do you handle user-ids?"
      ]
    },
    {
      "name": "SETPFN",
      "ord": 965,
      "Signature" : "void (*setpfn)(char *inp);",
      "Comments": [
        "Profanity checker routine"
      ]
    },
    {
      "name": "VALUID",
      "ord": 966,
      "Signature" : "int valuid(char *stg);",
      "Comments": []
    },
    {
      "name": "B2CCPY",
      "ord": 967,
      "Signature" : "void b2ccpy(char *dest,char *src,unsigned length);",
      "Comments": []
    },
    {
      "name": "C2BCPY",
      "ord": 968,
      "Signature" : "void c2bcpy(char *dest,char *src,unsigned length);",
      "Comments": []
    },
    {
      "name": "MORSUP",
      "ord": 969,
      "Signature" : "int morsup(int supstt);",
      "Comments": []
    },
    {
      "name": "ABOSUP",
      "ord": 970,
      "Signature" : "void abosup(int supstt);",
      "Comments": []
    },
    {
      "name": "ENDSUP",
      "ord": 971,
      "Signature" : "void endsup(void);",
      "Comments": []
    },
    {
      "name": "GCSPLON",
      "ord": 972,
      "Signature" : "void gcsplon(void);",
      "Comments": []
    },
    {
      "name": "CNVD2S",
      "ord": 973,
      "Signature" : "BOOL cnvd2s(char *saustg, struct saunam *saunam);",
      "Comments": [
        "Convert dpk from dev to struct form"
      ]
    },
    {
      "name": "CNVS2D",
      "ord": 974,
      "Signature" : "char *cnvs2d(struct saunam *saunam);",
      "Comments": [
        "Convert dpk from struct to dev form"
      ]
    },
    {
      "name": "CSBUMP",
      "ord": 975,
      "Signature" : "int csbump(int logon);",
      "Comments": []
    },
    {
      "name": "SUPDFTS",
      "ord": 976,
      "Signature" : "void supdfts(void);",
      "Comments": []
    },
    {
      "name": "FORREAL",
      "ord": 977,
      "Signature" : "BOOL forreal(void);",
      "Comments": []
    },
    {
      "name": "GCS2CS",
      "ord": 978,
      "Signature" : "void gcs2cs(void);",
      "Comments": []
    },
    {
      "name": "XITMOD",
      "ord": 979,
      "Signature" : "BOOL xitmod(void);",
      "Comments": []
    },
    {
      "name": "DFTANS",
      "ord": 980,
      "Signature" : "void dftans(char dft);",
      "Comments": []
    },
    {
      "name": "R2RGDP",
      "ord": 981,
      "Signature" : "void r2rgdp(int direction, struct saunam *dpknam);",
      "Comments": [
        "Respond to read with generic dynapak"
      ]
    },
    {
      "name": "MMAPPID",
      "ord": 983,
      "Signature" : "char *mmappid;",
      "Comments": [
        "Main menu agent's appid"
      ]
    },
    {
      "name": "SUPAPPID",
      "ord": 984,
      "Signature" : "char *supappid;",
      "Comments": [
        "Signup agent's appid"
      ]
    },
    {
      "name": "RNOSID",
      "ord": 985,
      "Signature" : "char *rnosid(char *regno);",
      "Comments": []
    },
    {
      "name": "MENUPG",
      "ord": 989,
      "Signature" : "struct mnupag {...} *menupg;",
      "Comments": [
        "Menu page data structure (btrieve layout)"
      ]
    },
    {
      "name": "SAVEPAGE",
      "ord": 990,
      "Signature" : "void savepage(struct mnupag *menupage,BOOL insert);",
      "Comments": []
    },
    {
      "name": "UNPACK",
      "ord": 991,
      "Signature" : "void unpack(struct mnupag *menupage);",
      "Comments": []
    },
    {
      "name": "REPACK",
      "ord": 992,
      "Signature" : "void repack(struct mnupag *menupage);",
      "Comments": []
    },
    {
      "name": "UIDXST",
      "ord": 993,
      "Signature" : "BOOL uidxst(char *uid);",
      "Comments": []
    },
    {
      "name": "BXABTV",
      "ord": 994,
      "Signature" : "void bxabtv(int loktyp);",
      "Comments": []
    },
    {
      "name": "EXABTV",
      "ord": 995,
      "Signature" : "void exabtv(void);",
      "Comments": []
    },
    {
      "name": "GETBTVL",
      "ord": 996,
      "Signature" : "void getbtvl (void *recptr, void *key, int keynum, int getopt, int loktyp);",
      "Comments": []
    },
    {
      "name": "OBTBTVL",
      "ord": 997,
      "Signature" : "int obtbtvl (void *recptr, void *key, int keynum, int obtopt, int loktyp);",
      "Comments": []
    },
    {
      "name": "ANPBTVLK",
      "ord": 998,
      "Signature" : "int anpbtvlk (void *recptr, int chkcas, int anpopt, int loktyp);",
      "Comments": []
    },
    {
      "name": "GABBTVL",
      "ord": 999,
      "Signature": "void gabbtv (void *recptr, long abspos, int keynum);",
      "Comments": [
        "Gets a Btrieve record from a file position"
      ]
    },
    {
      "name": "SWBUFS",
      "ord": 1000,
      "Signature" : "unsigned swbufs(struct datstm far *dsp);",
      "Comments": [
        "snkwin() stub for buffered DataStream"
      ]
    },
    {
      "name": "HOBUFS",
      "ord": 1001,
      "Signature" : "void hobufs(struct datstm far *dsp, char byte);",
      "Comments": [
        "hrsone() stub for buffered DataStream"
      ]
    },
    {
      "name": "DMBUFS",
      "ord": 1002,
      "Signature" : "void dmbufs(struct datstm far *dsp, unsigned nactual);",
      "Comments": [
        "didmov() stub for buffered DataStream"
      ]
    },
    {
      "name": "MVIAD",
      "ord": 1003,
      "Signature" : "unsigned mviad(struct datstm far *dsp, char far *srcloc, unsigned nwant);",
      "Comments": [
        "moveit() stub via didmov() & snkwin()"
      ]
    },
    {
      "name": "HVIAD",
      "ord": 1004,
      "Signature" : "void hviad(struct datstm far *dsp, char byte);",
      "Comments": [
        "hrsone() stub via didmov() & snkwin()"
      ]
    },
    {
      "name": "HDLRST",
      "ord": 1005,
      "Signature": "void (*hdlrst)();",
      "Comments": [
        "Handle Channel Reset"
      ]
    },
    {
      "name": "BBSFVC",
      "ord": 1006,
      "Signature": "int bbsfvc(char *chtype);",
      "Comments": [
        "Find a vacant GCDI channel",
        "-1 == none available"
      ]
    },
    {
      "name": "BBSDSC",
      "ord": 1008,
      "Signature": "void bbsdsc(int unum);",
      "Comments": [
        "Disconnect an interactive user"
      ]
    },
    {
      "name": "MXMSSZ",
      "ord": 1009,
      "Signature" : "unsigned mxmssz;",
      "Comments": []
    },
    {
      "name": "DOS_CLOSE",
      "ord": 1010,
      "Signature" : "unsigned _dos_close(int handle);",
      "Comments": [
        "_dos_close - close a file handle"
      ]
    },
    {
      "name": "DOS_OPEN",
      "ord": 1011,
      "Signature" : "unsigned _dos_open(const char *pathname, unsigned oflag, int *handle);",
      "Comments": [
        "_dos_open - opens a file for reading or writing"
      ]
    },
    {
      "name": "SETMODE",
      "ord": 1012,
      "Signature" : "int setmode(int handle, int mode);",
      "Comments": [
        "setmode - sets mode of open file"
      ]
    },
    {
      "name": "FTIME",
      "ord": 1013,
      "Signature" : "void ftime(struct timeb *TimeStructPtr);",
      "Comments": [
        "ftime - Get current time and store it in 'timeb' structure"
      ]
    },
    {
      "name": "SCANCH",
      "ord": 1014,
      "Signature" : "unsigned scanch(char *bytes,char target,int limit);",
      "Comments": []
    },
    {
      "name": "GLOBALGO",
      "ord": 1015,
      "Signature" : "int globalgo(void);",
      "Comments": []
    },
    {
      "name": "PRFASC",
      "ord": 1016,
      "Signature" : "void prfasc();",
      "Comments": []
    },
    {
      "name": "DFTUID",
      "ord": 1017,
      "Signature" : "int dftuid(char *userid);",
      "Comments": []
    },
    {
      "name": "LNGSWT",
      "ord": 1020,
      "Signature" : "int lngswt(void);",
      "Comments": []
    },
    {
      "name": "MONAME",
      "ord": 1021,
      "Signature" : "char moname[][4];",
      "Comments": []
    },
    {
      "name": "NCUDNT",
      "ord": 1022,
      "Signature" : "char *ncudnt(int date,int time);",
      "Comments": []
    },
    {
      "name": "CHKUID",
      "ord": 1023,
      "Signature": "int (*chkuid)(char *userid);",
      "Comments": [
        "Vector for approving User-ID",
        "0 == User OK",
        "1 == User logged on already",
        "2 == Doesn't have SAMPKY key",
        "3 == User suspended",
        "4 == User-ID not on file",
        "5 == app-specific rejection"
      ]
    },
    {
      "name": "RELOG",
      "ord": 1024,
      "Signature" : "void relog(void);",
      "Comments": []
    },
    {
      "name": "DECUSR",
      "ord": 1025,
      "Signature" : "void (*decusr)(void);",
      "Comments": [
        "decevy() service vector"
      ]
    },
    {
      "name": "DECUSN",
      "ord": 1026,
      "Signature" : "int decusn;",
      "Comments": [
        "User number"
      ]
    },
    {
      "name": "DECUSP",
      "ord": 1027,
      "Signature" : "struct user *decusp;",
      "Comments": [
        "User online information (MAJORBBS.H)"
      ]
    },
    {
      "name": "DECUAP",
      "ord": 1028,
      "Signature" : "struct usracc *decuap;",
      "Comments": [
        "User account information (USRACC.H)"
      ]
    },
    {
      "name": "DECCST",
      "ord": 1029,
      "Signature" : "long deccst;",
      "Comments": [
        "Cost of online time since last (*decusr)()"
      ]
    },
    {
      "name": "DECDFT",
      "ord": 1030,
      "Signature" : "void decdft(void);",
      "Comments": []
    },
    {
      "name": "DECLOG",
      "ord": 1031,
      "Signature" : "int declog(void);",
      "Comments": [
        "Check logon time limit"
      ]
    },
    {
      "name": "DECSUP",
      "ord": 1032,
      "Signature" : "int decsup(void);",
      "Comments": [
        "Check signup time limit"
      ]
    },
    {
      "name": "DECTDY",
      "ord": 1033,
      "Signature" : "int dectdy(void);",
      "Comments": [
        "Check today's time limit"
      ]
    },
    {
      "name": "DECCAL",
      "ord": 1034,
      "Signature" : "int deccal(void);",
      "Comments": [
        "Check per/call time limit"
      ]
    },
    {
      "name": "DEC15S",
      "ord": 1035,
      "Signature" : "void dec15s(void);",
      "Comments": [
        "Count out 15 sec of statistics"
      ]
    },
    {
      "name": "DECCRD",
      "ord": 1036,
      "Signature" : "void deccrd(long surdsc);",
      "Comments": [
        "Decrement credits for 15 sec online"
      ]
    },
    {
      "name": "LONAUD",
      "ord": 1037,
      "Signature": "int lonaud;",
      "Comments": [
        "Make an audit trail entry for each logon?"
      ]
    },
    {
      "name": "LONCDI",
      "ord": 1038,
      "Signature": "void (*loncdi)();",
      "Comments": [
        "Handle login audit trail msg on GCDI channel"
      ]
    },
    {
      "name": "FNEXT",
      "ord": 1039,
      "Signature" : "char *fnext(char *fulpth);",
      "Comments": []
    },
    {
      "name": "UL2AS",
      "ord": 1040,
      "Signature" : "char *ul2as(unsigned long ulongin);",
      "Comments": []
    },
    {
      "name": "STRSTP",
      "ord": 1041,
      "Signature": "char *strstp(char *str,char ch);",
      "Comments": []
    },
    {
      "name": "MEMSTP",
      "ord": 1042,
      "Signature": "int memstp(char *block,int nbytes,char byt);",
      "Comments": []
    },
    {
      "name": "MKDOSN",
      "ord": 1043,
      "Signature" : "char *mkdosn(char *string);",
      "Comments": []
    },
    {
      "name": "UNTAG",
      "ord": 1044,
      "Signature" : "void untag(int tagnum);",
      "Comments": [
        "Notify application of file un-tagging"
      ]
    },
    {
      "name": "NUMFTG",
      "ord": 1045,
      "Signature" : "void numftg(int newnum);",
      "Comments": [
        "Perform untag notification to the extent needed by new numftg"
      ]
    },
    {
      "name": "RMVTAG",
      "ord": 1046,
      "Signature" : "void rmvtag(char *untcmd);",
      "Comments": [
        "Handle command to untag"
      ]
    },
    {
      "name": "SYSCYC",
      "ord": 1048,
      "Signature": "void (*syscyc)(void);",
      "Comments": [
        "System-cycle vector (tail is prctask())"
      ]
    },
    {
      "name": "CHNCYC",
      "ord": 1049,
      "Signature": "void (*chncyc)(void);",
      "Comments": [
        "Channel-cycle vector (tail is dwopr())"
      ]
    },
    {
      "name": "LSTUNM",
      "ord": 1050,
      "Signature": "int lstunm;",
      "Comments": [
        "Last user-number returned by btuscn()"
      ]
    },
    {
      "name": "NEWUNM",
      "ord": 1051,
      "Signature": "int newunm;",
      "Comments": [
        "New user-number just returned by btuscn()"
      ]
    },
    {
      "name": "FIRSTWD",
      "ord": 1052,
      "Signature" : "char *firstwd(char *string);",
      "Comments": []
    },
    {
      "name": "NEXTWD",
      "ord": 1053,
      "Signature" : "char *nextwd(void);",
      "Comments": []
    },
    {
      "name": "RCDBAUD",
      "ord": 1054,
      "Signature": "void rcdbaud(long baud);",
      "Comments": [
        "Record the channel baud rate"
      ]
    },
    {
      "name": "SHOMAL",
      "ord": 1055,
      "Signature" : "void shomal(void);",
      "Comments": []
    },
    {
      "name": "GRTSUB",
      "ord": 1056,
      "Signature": "char *grtsub[];",
      "Comments": [
        "Array of GCDI channel type names"
      ]
    },
    {
      "name": "NUMCDI",
      "ord": 1057,
      "Signature": "int numcdi(char *chtype);",
      "Comments": [
        "Counts the hnumber of GCDI channels",
        "*chtype corresponding to MDF 'Channel Type', null == all GCDI types"
      ]
    },
    {
      "name": "HDLRLG",
      "ord": 1058,
      "Signature": "void (*hdlrlg)();",
      "Comments": [
        "Handle relogging on a new user"
      ]
    },
    {
      "name": "LNGTCK",
      "ord": 1059,
      "Signature" : "unsigned long lngtck;",
      "Comments": [
        "4-gig second counter"
      ]
    },
    {
      "name": "HDLZAP",
      "ord": 1060,
      "Signature": "void (*hdlzap)();",
      "Comments": [
        "Handle zapping an idle channel"
      ]
    },
    {
      "name": "TFCCHG",
      "ord": 1061,
      "Signature" : "long tfcchg(long nbytes,long credpk);",
      "Comments": [
        "Charge user for traffic"
      ]
    },
    {
      "name": "SYSTEM",
      "ord": 1062,
      "Signature" : "static int near pascal system(char far *ROM, char *Copyright);",
      "Comments": [
        "system - displays system information"
      ]
    },
    {
      "name": "SPAWNL",
      "ord": 1063,
      "Signature": "int spawnl(int modeF,const char *pathP, const char *arg0, const char *arg1, ..., const char *argn, NULL);",
      "Comments": [
        "spawnl - creates and runs child processes"
      ]
    },
    {
      "name": "ERRNO",
      "ord": 1064,
      "Signature" : "int *__errno (void);",
      "Comments": [
        "__errno - return address of errno value for this thread"
      ]
    },
    {
      "name": "NUMONL",
      "ord": 1065,
      "Signature" : "int numonl(int state);",
      "Comments": []
    },
    {
      "name": "FSDCHI",
      "ord": 1066,
      "Signature" : "char fsdchi(int chan, int c);",
      "Comments": [
        "btuchi() character input  handler for FSD"
      ]
    },
    {
      "name": "HDLGPR",
      "ord": 1067,
      "Signature" : "void (*hdlgpr)(char *);",
      "Comments": []
    },
    {
      "name": "ACTDET",
      "ord": 1068,
      "Signature": "int actdet;",
      "Comments": [
        "Activity detected in this channel cycle"
      ]
    },
    {
      "name": "STRRPL",
      "ord": 1069,
      "Signature": "char *strrpl(char *str,char och,char nch);",
      "Comments": []
    },
    {
      "name": "DELDIR",
      "ord": 1070,
      "Signature" : "int deldir(char *dirpath);",
      "Comments": []
    },
    {
      "name": "CNTDIRS",
      "ord": 1071,
      "Signature" : "void cntdirs(char *path);",
      "Comments": [
        "Count bytes and files in a directory and its subdirectories"
      ]
    },
    {
      "name": "NUMDIRS",
      "ord": 1072,
      "Signature" : "long numdirs;",
      "Comments": []
    },
    {
      "name": "DELDIRERR",
      "ord": 1073,
      "Signature" : "extern char deldirerr[];",
      "Comments": []
    },
    {
      "name": "OUTATA",
      "ord": 1074,
      "Signature": "int outata;",
      "Comments": [
        "Output ATA to modems when Answering?"
      ]
    },
    {
      "name": "HDLSMP",
      "ord": 1075,
      "Signature": "int (*hdlsmp)();",
      "Comments": [
        "Handle sample vs. paying channel determin"
      ]
    },
    {
      "name": "CHKACC",
      "ord": 1076,
      "Signature": "int (*chkacc)(void);",
      "Comments": [
        "Handle final accounting of logon"
      ]
    },
    {
      "name": "CHKPSW",
      "ord": 1077,
      "Signature": "int (*chkpsw)(char *psword);",
      "Comments": [
        "Vector for approving password"
      ]
    },
    {
      "name": "CNCBGW",
      "ord": 1078,
      "Signature" : "char *cncbgw(char *buffer,int sizbuf);",
      "Comments": []
    },
    {
      "name": "NINGRP",
      "ord": 1079,
      "Signature" : "int ningrp(int group);",
      "Comments": []
    },
    {
      "name": "BEG_PHASE",
      "ord": 1080,
      "Signature" : "void (*beg_phase)(char *name,long num);",
      "Comments": [
        "BEG_PHASE() vector"
      ]
    },
    {
      "name": "END_PHASE",
      "ord": 1081,
      "Signature" : "void (*end_phase)(char *name,long num);",
      "Comments": [
        "END_PHASE() vector"
      ]
    },
    {
      "name": "RPTPHS",
      "ord": 1082,
      "Signature" : "void rptphs(FILE *fp);",
      "Comments": [
        "Report on the past NUMPHS phases"
      ]
    },
    {
      "name": "PSTPHS",
      "ord": 1083,
      "Signature" : "struct phasedbg *pstphs(int index);",
      "Comments": [
        "Get information on a past phase"
      ]
    },
    {
      "name": "UNIQFN",
      "ord": 1084,
      "Signature" : "char *uniqfn(char *fspec);",
      "Comments": []
    },
    {
      "name": "SDLLINFO",
      "ord": 1085,
      "Signature" : "void sdllinfo(FILE *dst);",
      "Comments": []
    },
    {
      "name": "SHOSTACK",
      "ord": 1086,
      "Signature" : "void shostack(FILE *dst,char *ptr,int rows,int ibpval);",
      "Comments": []
    },
    {
      "name": "SFTRAK",
      "ord": 1087,
      "Signature": "char *sftrak;",
      "Comments": [
        "Source file tracking"
      ]
    },
    {
      "name": "SLTRAK",
      "ord": 1088,
      "Signature": "int sltrak;",
      "Comments": [
        "Source line tracking"
      ]
    },
    {
      "name": "MXBAUDL",
      "ord": 1089,
      "Signature": "unsigned mxbaud[];",
      "Comments": [
        "Array of maximum baud rates, by chan group"
      ]
    },
    {
      "name": "TFSPTH",
      "ord": 1090,
      "Comments": []
    },
    {
      "name": "MDMATZ",
      "ord": 1091,
      "Signature" : "char *mdmatz[NGROUPS];",
      "Comments": [
        "Array of pointers to modem reset strings"
      ]
    },
    {
      "name": "MDMBSY",
      "ord": 1092,
      "Signature" : "char *mdmbsy[NGROUPS];",
      "Comments": [
        "Array of pointers to modem busy-out stgs"
      ]
    },
    {
      "name": "MDMNAN",
      "ord": 1093,
      "Signature" : "char *mdmnan[NGROUPS];",
      "Comments": [
        "Array of pointers to modem no-answer stgs"
      ]
    },
    {
      "name": "KEYSBB",
      "ord": 1094,
      "Signature" : "BTVFILE *keysbb;",
      "Comments": [
        "Keys database pointer"
      ]
    },
    {
      "name": "GLOBGO",
      "ord": 1095,
      "Signature" : "int globgo;",
      "Comments": [
        "1=doing a global /go exit chain, 0=not"
      ]
    },
    {
      "name": "MEMDBGRPT",
      "ord": 1096,
      "Signature" : "void memdbgrpt(FILE *fp);",
      "Comments": [
        "Report on special memory debugging"
      ]
    },
    {
      "name": "CKSUM8",
      "ord": 1097,
      "Signature" : "unsigned char cksum8(unsigned char *stg, int nbytes);",
      "Comments": [
        "Returns 8-bit checksum"
      ]
    },
    {
      "name": "CKSUM16",
      "ord": 1098,
      "Signature" : "unsigned int cksum16(unsigned int *stg, int nwords);",
      "Comments": [
        "Returns 16-bit checksum"
      ]
    },
    {
      "name": "MEMDBG",
      "ord": 1099,
      "Signature" : "int memdbg;",
      "Comments": [
        "set to 0 to disable special sel dbg"
      ]
    },
    {
      "name": "AABBTVL",
      "ord": 1100,
      "Signature" : "int aabbtvl (void *recptr, long abspos, int keynum, int loktyp);",
      "Comments": []
    },
    {
      "name": "STPBTVL",
      "ord": 1101,
      "Signature" : "int stpbtvl (void *recptr, int stpopt, int loktyp);",
      "Comments": []
    },
    {
      "name": "UNLBTV",
      "ord": 1102,
      "Signature" : "void unlbtv (long abspos, int keynum);",
      "Comments": []
    },
    {
      "name": "WSLBTV",
      "ord": 1103,
      "Signature" : "int wslbtv (void);",
      "Comments": []
    },
    {
      "name": "ISWRITE",
      "ord": 1104,
      "Signature" : "BOOL iswrite(void);",
      "Comments": []
    },
    {
      "name": "CRC16",
      "ord": 1105,
      "Signature" : "unsigned int crc16(unsigned char *stg, int nbytes);",
      "Comments": [
        "Returns 16-bit CRC"
      ]
    },
    {
      "name": "CRC32",
      "ord": 1106,
      "Signature" : "unsigned long crc32(unsigned char *stg, int nbytes);",
      "Comments": [
        "Returns 32-bit CRC"
      ]
    },
    {
      "name": "ASUPQ",
      "ord": 1107,
      "Signature" : "char *asupq[NMQSTS];",
      "Comments": [
        "Pointers to addtn'l signup questions"
      ]
    },
    {
      "name": "SUPHDR",
      "ord": 1108,
      "Signature" : "char *suphdr;",
      "Comments": [
        "Additional signup questions header"
      ]
    },
    {
      "name": "SUPEND",
      "ord": 1109,
      "Signature" : "char *supend;",
      "Comments": [
        "Closing thanks for additonal signup questions"
      ]
    },
    {
      "name": "SUPFRM",
      "ord": 1110,
      "Signature" : "int supfrm;",
      "Comments": [
        "Format output in fixed-length ASCII?"
      ]
    },
    {
      "name": "SAVUSR",
      "ord": 1111,
      "Signature" : "void savusr(char *answers0);",
      "Comments": []
    },
    {
      "name": "B2CCVT",
      "ord": 1112,
      "Signature" : "char *b2ccvt(char *str,int bufsiz);",
      "Comments": []
    },
    {
      "name": "C2BCVT",
      "ord": 1113,
      "Signature" : "char *c2bcvt(char *str,int bufsiz);",
      "Comments": []
    },
    {
      "name": "PAGEROU",
      "ord": 1114,
      "Signature" : "int (*pagerou)();",
      "Comments": [
        "Teleconference page routine"
      ]
    },
    {
      "name": "CSPAGEROU",
      "ord": 1115,
      "Signature" : "int (*cspagerou)();",
      "Comments": [
        "c/s page routine"
      ]
    },
    {
      "name": "GLBKEY",
      "ord": 1116,
      "Signature" : "char *glbkey;",
      "Comments": [
        "Key for 'sysop' power: /l"
      ]
    },
    {
      "name": "GPAGINT",
      "ord": 1117,
      "Signature" : "int gpagint;",
      "Comments": [
        "Global page interval, used if gpirou==NULL"
      ]
    },
    {
      "name": "PAGESET",
      "ord": 1118,
      "Signature" : "int (*pageset)();",
      "Comments": [
        "page setting routine"
      ]
    },
    {
      "name": "NRECCL",
      "ord": 1119,
      "Signature" : "int nreccl",
      "Comments": [
        "Number of recent calls to record"
      ]
    },
    {
      "name": "SYSREC",
      "ord": 1120,
      "Signature" : "int sysrec;",
      "Comments": [
        "Include MASTERs in /RECENT list?"
      ]
    },
    {
      "name": "RECENTS",
      "ord": 1121,
      "Signature" : "struct recalls *recents;",
      "Comments": [
        "Array of most recent callers"
      ]
    },
    {
      "name": "LANGCHG",
      "ord": 1122,
      "Signature" : "char *langchg;",
      "Comments": [
        "Key required to change language pref"
      ]
    },
    {
      "name": "FULLPATH",
      "ord": 1123,
      "Signature" : "char *_fullpath(char *buffer, const char * pathname, size_t maxlen);",
      "Comments": [
        "_fullpath - makes new file name"
      ]
    },
    {
      "name": "NORMSPEC",
      "ord": 1124,
      "Signature" : "char *normspec(char *dest,char *src);",
      "Comments": []
    },
    {
      "name": "FPUTS",
      "ord": 1125,
      "Signature" : "int fputs(const char *string, FILE *stream);",
      "Comments": [
        "fputs - puts a string on a stream"
      ]
    },
    {
      "name": "GMKDIR",
      "ord": 1126,
      "Signature" : "void gmkdir(char *dirnam);",
      "Comments": []
    },
    {
      "name": "FILNPART",
      "ord": 1127,
      "Signature" : "char *filnpart(char *filespec);",
      "Comments": []
    },
    {
      "name": "PATHPART",
      "ord": 1128,
      "Signature" : "char *pathpart(char *filespec);",
      "Comments": []
    },
    {
      "name": "STDMCHK",
      "ord": 1129,
      "Signature" : "BOOL stdmchk(int mnum);",
      "Comments": [
        "Does current user have key in message?"
      ]
    },
    {
      "name": "INCUSR",
      "ord": 1130,
      "Signature" : "int incusr(int unum,BOOL iginv,BOOL inccur);",
      "Comments": []
    },
    {
      "name": "AXSCHG",
      "ord": 1131,
      "Signature" : "void axschg(char *uid);",
      "Comments": []
    },
    {
      "name": "CENTURY",
      "ord": 1132,
      "Signature" : "int century;",
      "Comments": [
        "19-23 - ind's century for v2sdat()"
      ]
    },
    {
      "name": "V2DDAT",
      "ord": 1133,
      "Signature": "int v2ddat(double vbdat);",
      "Comments": []
    },
    {
      "name": "V2DTIM",
      "ord": 1134,
      "Signature" : "int v2dtim(double vbdat);",
      "Comments": []
    },
    {
      "name": "V2SDAT",
      "ord": 1135,
      "Signature" : "char *v2sdat(double vbdat);",
      "Comments": []
    },
    {
      "name": "V2STIM",
      "ord": 1136,
      "Signature" : "char *v2stim(double vbdat);",
      "Comments": []
    },
    {
      "name": "D2VDAT",
      "ord": 1137,
      "Signature" : "double d2vdat(int dosdat,int dostim);",
      "Comments": []
    },
    {
      "name": "S2VDAT",
      "ord": 1138,
      "Signature" : "double s2vdat(char *stgdat,char *stgtim);",
      "Comments": []
    },
    {
      "name": "INFSD",
      "ord": 1139,
      "Signature" : "int infsd(int usn, void (*exipnt)());",
      "Comments": [
        "Is the user in FSD from here?"
      ]
    },
    {
      "name": "PSMATMS",
      "ord": 1140,
      "Signature" : "void psmatms(char *pagmsg);",
      "Comments": [
        "Send Sysop page to main console"
      ]
    },
    {
      "name": "SPAGESET",
      "ord": 1141,
      "Signature" : "void (*spageset)();",
      "Comments": [
        "Set page setting routine "
      ]
    },
    {
      "name": "STLCAT",
      "ord": 1142,
      "Signature" : "char *stlcat(char *dst,char *src,unsigned num);",
      "Comments": []
    },
    {
      "name": "REFLOW",
      "ord": 1143,
      "Signature" : "void reflow(char *buf);",
      "Comments": [
        "Re-flow buffer for C/S output"
      ]
    },
    {
      "name": "NAMTMP",
      "ord": 1144,
      "Signature" : "struct saunam *namtmp;",
      "Comments": [
        "Temp buffer for agents to store names"
      ]
    },
    {
      "name": "ITEMIDXD",
      "ord": 1145,
      "Signature" : "char *itemidxd(char *ctlstg,int index,char *delim);",
      "Comments": []
    },
    {
      "name": "ITEMIDX",
      "ord": 1146,
      "Signature" : "char *itemidx(char *ctlstg,int index);",
      "Comments": []
    },
    {
      "name": "ITEMCNTD",
      "ord": 1147,
      "Signature" : "int itemcntd(char *ctlstg,char *delim);",
      "Comments": []
    },
    {
      "name": "ITEMCNT",
      "ord": 1148,
      "Signature" : "int itemcnt(char *ctlstg);",
      "Comments": []
    },
    {
      "name": "DOVECS",
      "ord": 1149,
      "Signature" : "void dovecs(int vechdl);",
      "Comments": [
        "Call all hooked functions"
      ]
    },
    {
      "name": "CONHDL",
      "ord": 1150,
      "Signature" : "int conhdl;",
      "Comments": [
        "Handle to array of connection fucntions"
      ]
    },
    {
      "name": "DSCHDL",
      "ord": 1151,
      "Signature" : "int dschdl;",
      "Comments": [
        "Handle to array of disconnection functions"
      ]
    },
    {
      "name": "MCUHDL",
      "ord": 1152,
      "Signature" : "int mcuhdl;",
      "Comments": [
        "Handle to array of auto-cleanup functions"
      ]
    },
    {
      "name": "DLAHDL",
      "ord": 1153,
      "Signature" : "int dlahdl;",
      "Comments": [
        "Handle to array of delete-acct functions"
      ]
    },
    {
      "name": "FINHDL",
      "ord": 1154,
      "Signature" : "int finhdl;",
      "Comments": [
        "Handle to array of shutdown functions"
      ]
    },
    {
      "name": "FFINHDL",
      "ord": 1155,
      "Signature" : "int ffinhdl;",
      "Comments": [
        "Handle to array of final shutdown functions"
      ]
    },
    {
      "name": "HOOK_FINALSHUTDOWN",
      "ord": 1156,
      "Signature" : "void hook_finalshutdown(void (*ffinrou)(void));",
      "Comments": [
        "Hook final system shutdown"
      ]
    },
    {
      "name": "TMPNAM",
      "ord": 1157,
      "Signature" : "char *tmpnam(char *s);",
      "Comments": [
        "tmpnam - builds a unique file name"
      ]
    },
    {
      "name": "CSVCRR",
      "ord": 1158,
      "Signature": "int csvcrr;",
      "Comments": [
        "C/S credit consumption rate per minute"
      ]
    },
    {
      "name": "FIXPTH",
      "ord": 1159,
      "Signature" : "void fixpth(char *path);",
      "Comments": []
    },
    {
      "name": "UDWRAP",
      "ord": 1160,
      "Signature" : "int udwrap;",
      "Comments": [
        "Determines if cursor up/down array wraps at limits"
      ]
    },
    {
      "name": "SHORTM",
      "ord": 1161,
      "Signature" : "int shortm;",
      "Comments": [
        "Toggle to display short or long menus", "0 == short, 1 == long"
      ]
    },
    {
      "name": "PFCEIL",
      "ord": 1162,
      "Signature" : "int pfceil;",
      "Comments": [
        "Profanity detection ceiling"
      ]
    },
    {
      "name": "S2AAHDL",
      "ord": 1163,
      "Signature" : "int s2aahdl;",
      "Comments": [
        "Handle to array of C/S->A/A functions"
      ]
    },
    {
      "name": "S2CSHDL",
      "ord": 1164,
      "Signature" : "int s2cshdl;",
      "Comments": [
        "Handle to array of A/A->C/S functions"
      ]
    },
    {
      "name": "HOOK_SWT2AA",
      "ord": 1165,
      "Signature" : "void hook_swt2aa(void (*s2aarou)(void));",
      "Comments": [
        "Hook C/S user switching C/S->A/A mode"
      ]
    },
    {
      "name": "HOOK_SWT2CS",
      "ord": 1166,
      "Signature" : "void hook_swt2cs(void (*s2csrou)(void));",
      "Comments": [
        "Hook C/S user switching A/A->C/S mode"
      ]
    },
    {
      "name": "NEWPOOL",
      "ord": 1167,
      "Signature" : "int newpool(unsigned areasiz, int nareas, int ninmem); ",
      "Comments": [
        "Create a new pool of memory areas"
      ]
    },
    {
      "name": "RSVAREA",
      "ord": 1168,
      "Signature" : "int rsvarea(int poolhdl);",
      "Comments": [
        "Reserve a memory area within a pool"
      ]
    },
    {
      "name": "UNRAREA",
      "ord": 1169,
      "Signature" : "void unrarea(int poolhdl, int areahdl);",
      "Comments": [
        "Unreserve a memory area within a pool"
      ]
    },
    {
      "name": "HOOK_ANNOUNCE",
      "ord": 1170,
      "Signature" : "void hook_announce(void (*annorou)(void));",
      "Comments": [
        "Hook announcement routine"
      ]
    },
    {
      "name": "ADDANNOM",
      "ord": 1171,
      "Signature" : "void addannom(char *message,char *appid,char *cmdstg);",
      "Comments": [
        "Sends an announcement with the module reference"
      ]
    },
    {
      "name": "ADDANNO",
      "ord": 1172,
      "Signature" : "void addanno(char *message);",
      "Comments": [
        "Tacks one announcement onto rsptmp"
      ]
    },
    {
      "name": "ANNOHDL",
      "ord": 1173,
      "Signature" : "int annohdl;",
      "Comments": [
        "Handle to array of announcement functions"
      ]
    },
    {
      "name": "DCLANNO",
      "ord": 1174,
      "Signature" : "void dclanno(int size);",
      "Comments": [
        "Module declaration for annoncement per-request"
      ]
    },
    {
      "name": "ANNOMEM",
      "ord": 1175,
      "Signature" : "char *annomem;",
      "Comments": [
        "Per-request logon announcement memory"
      ]
    },
    {
      "name": "ABSDTDY",
      "ord": 1176,
      "Signature" : "bool absdtdy(void);",
      "Comments": [
        "Determines if there was an abnormal shutdown (crash) today"
      ]
    },
    {
      "name": "ISMYREQ",
      "ord": 1177,
      "Signature" : "bool ismyreq(int reqid,char *appid);",
      "Comments": []
    },
    {
      "name": "GNUMDB",
      "ord": 1178,
      "Signature" : "int gnumdb(char *mdfnam);",
      "Comments": []
    },
    {
      "name": "CURMBK",
      "ord": 1179,
      "Signature" : "FILE *curmbk;",
      "Comments": [
        "Template setmkb() pointer"
      ]
    },
    {
      "name": "BBSCON",
      "ord": 1180,
      "Signature": "int bbscon(int unum);",
      "Comments": [
        "Somebody wants to connect to the BBS",
        "0 == channel busy/inappropriate",
        "1 == ok"
      ]
    },
    {
      "name": "EDTPFN",
      "ord": 1181,
      "Signature" : "void (*edtpfn)(int pfnlvl);",
      "Comments": [
        "Editor set pfn level (call after bgnedt)"
      ]
    },
    {
      "name": "HANGUPS",
      "ord": 1182,
      "Signature" : "void (*hangups)();",
      "Comments": [
        "Always call first on handup intercept vector"
      ]
    },
    {
      "name": "MSTSCAN",
      "ord": 1183,
      "Signature" : "char *mstscan(char *msgfil,char *vblnam,int maxsiz);",
      "Comments": []
    },
    {
      "name": "SNUMDB",
      "ord": 1184,
      "Signature" : "void snumdb(char *mdfnam,int ndbfils);",
      "Comments": []
    },
    {
      "name": "INFSDHUP",
      "ord": 1185,
      "Signature" : "bool infsdhup;",
      "Comments": [
        "Determines if we're in the middle of FSD handup handling"
      ]
    },
    {
      "name": "FOPAVL",
      "ord": 1186,
      "Signature" : "int fopavl;",
      "Comments": [
        "The number of fopen()'s left according to Borland's table"
      ]
    },
    {
      "name": "ACNMB",
      "ord": 1187,
      "Signature" : "FILE *acnmb;",
      "Comments": [
        "Accounting named-message file block pointer"
      ]
    },
    {
      "name": "SETBBYE",
      "ord": 1188,
      "Signature" : "void setbbye(void);",
      "Comments": [
        "Set BYEBYE for current usernum"
      ]
    },
    {
      "name": "SCNMDF",
      "ord": 1189,
      "Signature" : "char *scnmdf(char *mdfnam,char *linpfx);",
      "Comments": []
    },
    {
      "name": "MDFODMD",
      "ord": 1190,
      "Signature" : "char *mdfodmd(char *mdfnam);",
      "Comments": []
    },
    {
      "name": "BGNEDT",
      "ord": 1191,
      "Signature" : "int (*bgnedt)();",
      "Comments": [
        "System editor call"
      ]
    },
    {
      "name": "EDTIMR",
      "ord": 1192,
      "Signature" : "void (*edtimr)(int (*imradr)());",
      "Comments": [
        "Editor import hooking routine"
      ]
    },
    {
      "name": "ISFXVAL",
      "ord": 1193,
      "Signature": "bool isfxval(unsigned *result, char *str);",
      "Comments": [
        "Converts number dpk suffic to an int",
        "Returns FALSE if str not numeric"
      ]
    },
    {
      "name": "LSFXVAL",
      "ord": 1194,
      "Signature": "bool lsfxval(unsigned long *result, char *str);",
      "Comments": [
        "Converts number dpk suffic to a long",
        "Returns FALSE if str not numeric"
      ]
    },
    {
      "name": "RSPTIM",
      "ord": 1195,
      "Signature" : "unsigned long rsptim;",
      "Comments": [
        "Average response time, in 1/65536 sec units"
      ]
    },
    {
      "name": "VALLON",
      "ord": 1196,
      "Signature": "BOOL (*vallon)(void);",
      "Comments": [
        "Vector for final logon validation"
      ]
    },
    {
      "name": "BYENDL",
      "ord": 1197,
      "Signature" : "void byendl();",
      "Comments": [
        "Log-off a user (no BYEDLY, no depadb)"
      ]
    },
    {
      "name": "STRINS",
      "ord": 1198,
      "Signature" : "char * strins(char *dststg, char *insstg, int sizdst);",
      "Comments": [
        "Insert a string before another"
      ]
    },
    {
      "name": "USRFLAGS",
      "ord": 1199,
      "Signature" : "void usrflags(void);",
      "Comments": [
        "Set some usrptr->flags & ->usetmr"
      ]
    },
    {
      "name": "OPNBTVL",
      "ord": 1200,
      "Signature" : "BTVFILE *opnbtvl (char *filnam, int maxlen, char *owner);",
      "Comments": [
        "Open a Btrieve file (low level), return pointer"
      ]
    },
    {
      "name": "NMALLOC",
      "ord": 1201,
      "Signature" : "unsigned long nmalloc;",
      "Comments": [
        "Returns the count of malloc()'s"
      ]
    },
    {
      "name": "NMSKIP",
      "ord": 1202,
      "Signature" : "unsigned long nmskip;",
      "Comments": [
        "Skip this many initial malloc's"
      ]
    },
    {
      "name": "NMSCTR",
      "ord": 1203,
      "Signature" : "unsigned long nmsctr;",
      "Comments": [
        "Counter up to nmskip"
      ]
    },
    {
      "name": "NMSPEC",
      "ord": 1204,
      "Signature" : "unsigned long nmspec;",
      "Comments": [
        "Count of special malloc() sel's"
      ]
    },
    {
      "name": "NMBUST",
      "ord": 1205,
      "Signature" : "unsigned long nmbust;",
      "Comments": [
        "Count special sel's averted"
      ]
    },
    {
      "name": "NMLINR",
      "ord": 1206,
      "Signature" : "unsigned long nmlinr;",
      "Comments": [
        "Number of linear conv errors"
      ]
    },
    {
      "name": "NMFREE",
      "ord": 1207,
      "Signature" : "unsigned long nmfree;",
      "Comments": [
        "Count free()'s"
      ]
    },
    {
      "name": "LSTALCPHS",
      "ord": 1208,
      "Comments": []
    },
    {
      "name": "LSTALCSIZ",
      "ord": 1209,
      "Comments": []
    },
    {
      "name": "GOODCPTR",
      "ord": 1210,
      "Signature" : "int goodcptr(void *ptr);",
      "Comments": []
    },
    {
      "name": "ALCDBG",
      "ord": 1211,
      "Signature" : "int alcdbg;",
      "Comments": [
        "(memdbg) 0=running low on selectors"
      ]
    },
    {
      "name": "ASTMODE",
      "ord": 1212,
      "Signature": "int astmode;",
      "Comments": [
        "Assertion failure mode:",
        "1==ignore, 2==make report to disk, 3==call catastro(), shutdown"
      ]
    },
    {
      "name": "GALASTFAIL",
      "ord": 1213,
      "Signature" : "void galastfail(char *filinf, unsigned long linnum, char *message);",
      "Comments": [
        "Assertion failure"
      ]
    },
    {
      "name": "ASTRPTFIL",
      "ord": 1214,
      "Signature" : "char *astrptfil;",
      "Comments": [
        "Assertion failure report file"
      ]
    },
    {
      "name": "BTVUPTR",
      "ord": 1215,
      "Signature" : "int (*btvuptr)(int funcno,int datbufseg,int keyseg,int keyno,int rlen);",
      "Comments": []
    },
    {
      "name": "BTVERRPTR",
      "ord": 1216,
      "Signature" : "void (*btverrptr)(char *who)",
      "Comments": [
        "Vector for low level Btrieve funcs"
      ]
    },
    {
      "name": "LOCALECONVENTION",
      "ord": 1217,
      "Signature" : "struct lconv _localeconvention {... };",
      "Comments": [
        "The 'C' locale lconv structure"
      ]
    },
    {
      "name": "CRCTAB",
      "ord": 1300,
      "Signature" : "unsigned short crctab[];",
      "Comments": []
    },
    {
      "name": "CR3TAB",
      "ord": 1301,
      "Signature" : "long cr3tab[];",
      "Comments": []
    },
    {
      "name": "CATRPT",
      "ord": 1302,
      "Signature" : "void (*catrpt)(char *filnam);",
      "Comments": []
    },
    {
      "name": "PLSTAK",
      "ord": 1303,
      "Signature" : "void plstak(char *filnam, void *sssp, unsigned int bp);",
      "Comments": [
        "Phar Lap stack report"
      ]
    },
    {
      "name": "CATBPSAV",
      "ord": 1304,
      "Signature" : "void *catbpsav;",
      "Comments": []
    },
    {
      "name": "CATACT",
      "ord": 1305,
      "Signature" : "int catact;",
      "Comments": []
    },
    {
      "name": "INEDIT",
      "ord": 1306,
      "Signature" : "int (*inedit);",
      "Comments": [
        "User-is-in editor routine"
      ]
    },
    {
      "name": "AREAPTR",
      "ord": 1307,
      "Signature" : "void *areaptr(int poolhdl, int areahdl);",
      "Comments": [
        "Get pointer to a reserved mem area"
      ]
    },
    {
      "name": "GLBKEYI",
      "ord": 1308,
      "Signature" : "char *glbkeyi;",
      "Comments": [
        "Key for 'sysop' power: /invis"
      ]
    },
    {
      "name": "GOODBLK",
      "ord": 1309,
      "Signature" : "unsigned goodblk(void *ptr,unsigned nbytes);",
      "Comments": []
    },
    {
      "name": "SAPSUP",
      "ord": 1310,
      "Signature" : "int sapsup;",
      "Comments": [
        "Server Advertising Protocol supported?"
      ]
    },
    {
      "name": "SAPPRP",
      "ord": 1311,
      "Signature" : "void sapprp(void);",
      "Comments": []
    },
    {
      "name": "SAPREP",
      "ord": 1312,
      "Signature" : "struct sapinf *saprep(int mask);",
      "Comments": [
        "Report on one S.A.P. server at a time"
      ]
    },
    {
      "name": "ISERRF",
      "ord": 1313,
      "Signature": "BOOL (*iserrf)(int chan);",
      "Comments": [
        "Determines if the channel is 'error free'"
      ]
    },
    {
      "name": "GPIROU",
      "ord": 1314,
      "Signature" : "int (*gpirou)(int usn);",
      "Comments": [
        "Global page interval routine"
      ]
    },
    {
      "name": "LOKNAM",
      "ord": 1315,
      "Signature" : "int loknam(char *lokname);",
      "Comments": [
        "Validates a proposed lock name"
      ]
    },
    {
      "name": "LOW_HASKEY",
      "ord": 1316,
      "Signature" : "int low_haskey(char *lock,int unum,struct user *uptr);",
      "Comments": [
        "Low-Level haskey() handler (no ands/ors)"
      ]
    },
    {
      "name": "CLISRV",
      "ord": 1317,
      "Signature" : "int clisrv;",
      "Comments": [
        "Denotes supporting client/server logons"
      ]
    },
    {
      "name": "IMDROP",
      "ord": 1318,
      "Signature" : "void imdrop(void);",
      "Comments": [
        "Immediately drop current user channel"
      ]
    },
    {
      "name": "LOCK",
      "ord": 1319,
      "Signature" : "int lock(int handle, long ofs, long length);",
      "Comments": [
        "lock - sets file sharing locks"
      ]
    },
    {
      "name": "UNLOCK",
      "ord": 1320,
      "Signature" : "int unlock(int handle, long ofs, long length);",
      "Comments": [
        "unlock - resets file sharing locks"
      ]
    },
    {
      "name": "LOCALTIME",
      "ord": 1321,
      "Signature" : "struct tm *localtime(long *clock);",
      "Comments": [
        "localtime - converts date and time to a structure"
      ]
    },
    {
      "name": "CHSIZE",
      "ord": 1322,
      "Signature" : "int chsize(int fildes, long newSize);",
      "Comments": [
        "chsize - change file size"
      ]
    },
    {
      "name": "REMOVE",
      "ord": 1323,
      "Signature" : "int remove(const char *filename);",
      "Comments": [
        "Remove - deletes a file"
      ]
    },
    {
      "name": "OESROU",
      "ord": "1324",
      "Signature" : "BOOL (*oesrou)(int unum);",
      "Comments": [
        "Vector for BYEBYE disconnection"
      ]
    },
    {
      "name": "VTMSNDOK",
      "ord": "1325",
      "Signature" : "BOOL vtmsndok(int tochan);",
      "Comments": [
        "OK to send to this channel?"
      ]
    },
    {
      "name": "VTMSEND",
      "ord": "1326",
      "Signature" : "void vtmsend(int srcid, int length, void *value);",
      "Comments": [
        "call right after vtmsndok() == TRUE"
      ]
    },
    {
      "name": "SETPFN",
      "ord": "1327",
      "Signature" : "void (*setpfn)(char *inp);",
      "Comments": [
        "Profanity checker routine"
      ]
    },
    {
      "name": "WCMATCH",
      "ord": "1328",
      "Signature" : "BOOL wcmatch(unsigned char *inpstr, unsigned char *picstg);",
      "Comments": [
        "Wild-card match input against picstg"
      ]
    },
    {
      "name": "SAWCCRS",
      "ord": "1329",
      "Signature" : "void sawccrs(void (*hookrou)(void), char *verstg);",
      "Comments": [
        "Set Gcomm-specific AWAITC CRSTG hook"
      ]
    },
    {
      "name": "ZAPTBL",
      "ord": "1330",
      "Signature" : "int *zaptbl;",
      "Comments": [
        "Array of connect timeout values"
      ]
    },
    {
      "name": "SAWCLAN",
      "ord": "1331",
      "Signature" : "void sawclan(void (*hookrou)(void), char *verstg);",
      "Comments": [
        "Set Gcomm-specific AWAITC LAN hook"
      ]
    },
    {
      "name": "SYSLOAD",
      "ord": "1332",
      "Signature" : "int sysload[60];",
      "Comments": [
        "Lines in use from SUMMARY.C load grph"
      ]
    },
    {
      "name": "MAXPOL",
      "ord": "1333",
      "Signature" : "unsigned maxpol;",
      "Comments": [
        "Overall maximum polling rate for all channels"
      ]
    },
    {
      "name": "MAXSPD",
      "ord": "1334",
      "Signature" : "unsigned maxspd;",
      "Comments": [
        "Overall maximum bps of all channels"
      ]
    },
    {
      "name": "OSVERSN",
      "ord": "1335",
      "Signature" : "char *osversn(void);",
      "Comments": []
    },
    {
      "name": "CURDLLS",
      "ord": "1336",
      "Signature" : "int curdlls;",
      "Comments": [
        "Count of the DLL's loaded"
      ]
    },
    {
      "name": "BTRSET",
      "ord": "1337",
      "Signature" : "char btrset[80];",
      "Comments": [
        "Parameters we're passing to Btrieve"
      ]
    },
    {
      "name": "MULTSK",
      "ord": "1338",
      "Signature" : "int multsk;",
      "Comments": [
        "Is a multitasker being used?"
      ]
    },
    {
      "name": "MULMTH",
      "ord": "1339",
      "Signature" : "int mulmth;",
      "Comments": [
        "If multitasking, what method is used?"
      ]
    },
    {
      "name": "SHOCHLHOOK",
      "ord": "1340",
      "Comments": []
    },
    {
      "name": "HASAXS",
      "ord": "1341",
      "Signature" : "static BOOL hasaxs(struct mnupag *page);",
      "Comments": []
    },
    {
      "name": "TRAVAI",
      "ord": "1342",
      "Signature" : "unsigned travai(int chan,int priority);",
      "Comments": []
    },
    {
      "name": "PHAVAI",
      "ord": "1343",
      "Signature" : "unsigned phavai(int chan);",
      "Comments": []
    },
    {
      "name": "MTRLNG",
      "ord": "1344",
      "Signature" : "long mtrlng;",
      "Comments": [
        "CNC returned long integer"
      ]
    },
    {
      "name": "SWTCLSHOOK",
      "ord": "1345",
      "Comments": []
    },
    {
      "name": "RSYFADHOOK",
      "ord": "1346",
      "Comments": []
    }
  ]
}